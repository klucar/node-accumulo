//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
var TKey = module.exports.TKey = function(args) {
  this.row = null;
  this.colFamily = null;
  this.colQualifier = null;
  this.colVisibility = null;
  this.timestamp = null;
  if (args) {
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.colFamily !== undefined) {
      this.colFamily = args.colFamily;
    }
    if (args.colQualifier !== undefined) {
      this.colQualifier = args.colQualifier;
    }
    if (args.colVisibility !== undefined) {
      this.colVisibility = args.colVisibility;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
  }
};
TKey.prototype = {};
TKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.colFamily = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.colQualifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.colVisibility = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TKey.prototype.write = function(output) {
  output.writeStructBegin('TKey');
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.colFamily) {
    output.writeFieldBegin('colFamily', Thrift.Type.STRING, 2);
    output.writeString(this.colFamily);
    output.writeFieldEnd();
  }
  if (this.colQualifier) {
    output.writeFieldBegin('colQualifier', Thrift.Type.STRING, 3);
    output.writeString(this.colQualifier);
    output.writeFieldEnd();
  }
  if (this.colVisibility) {
    output.writeFieldBegin('colVisibility', Thrift.Type.STRING, 4);
    output.writeString(this.colVisibility);
    output.writeFieldEnd();
  }
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TColumn = module.exports.TColumn = function(args) {
  this.columnFamily = null;
  this.columnQualifier = null;
  this.columnVisibility = null;
  if (args) {
    if (args.columnFamily !== undefined) {
      this.columnFamily = args.columnFamily;
    }
    if (args.columnQualifier !== undefined) {
      this.columnQualifier = args.columnQualifier;
    }
    if (args.columnVisibility !== undefined) {
      this.columnVisibility = args.columnVisibility;
    }
  }
};
TColumn.prototype = {};
TColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.columnFamily = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.columnQualifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.columnVisibility = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumn.prototype.write = function(output) {
  output.writeStructBegin('TColumn');
  if (this.columnFamily) {
    output.writeFieldBegin('columnFamily', Thrift.Type.STRING, 1);
    output.writeString(this.columnFamily);
    output.writeFieldEnd();
  }
  if (this.columnQualifier) {
    output.writeFieldBegin('columnQualifier', Thrift.Type.STRING, 2);
    output.writeString(this.columnQualifier);
    output.writeFieldEnd();
  }
  if (this.columnVisibility) {
    output.writeFieldBegin('columnVisibility', Thrift.Type.STRING, 3);
    output.writeString(this.columnVisibility);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TMutation = module.exports.TMutation = function(args) {
  this.row = null;
  this.data = null;
  this.values = null;
  this.entries = null;
  if (args) {
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.values !== undefined) {
      this.values = args.values;
    }
    if (args.entries !== undefined) {
      this.entries = args.entries;
    }
  }
};
TMutation.prototype = {};
TMutation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.values = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.values.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.entries = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMutation.prototype.write = function(output) {
  output.writeStructBegin('TMutation');
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.data) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  if (this.values) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter7 in this.values)
    {
      if (this.values.hasOwnProperty(iter7))
      {
        iter7 = this.values[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.entries) {
    output.writeFieldBegin('entries', Thrift.Type.I32, 4);
    output.writeI32(this.entries);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TKeyExtent = module.exports.TKeyExtent = function(args) {
  this.table = null;
  this.endRow = null;
  this.prevEndRow = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.endRow !== undefined) {
      this.endRow = args.endRow;
    }
    if (args.prevEndRow !== undefined) {
      this.prevEndRow = args.prevEndRow;
    }
  }
};
TKeyExtent.prototype = {};
TKeyExtent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.prevEndRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TKeyExtent.prototype.write = function(output) {
  output.writeStructBegin('TKeyExtent');
  if (this.table) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.endRow) {
    output.writeFieldBegin('endRow', Thrift.Type.STRING, 2);
    output.writeString(this.endRow);
    output.writeFieldEnd();
  }
  if (this.prevEndRow) {
    output.writeFieldBegin('prevEndRow', Thrift.Type.STRING, 3);
    output.writeString(this.prevEndRow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TKeyValue = module.exports.TKeyValue = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
TKeyValue.prototype = {};
TKeyValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TKey();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TKeyValue.prototype.write = function(output) {
  output.writeStructBegin('TKeyValue');
  if (this.key) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 1);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.value) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ScanResult = module.exports.ScanResult = function(args) {
  this.results = null;
  this.more = null;
  if (args) {
    if (args.results !== undefined) {
      this.results = args.results;
    }
    if (args.more !== undefined) {
      this.more = args.more;
    }
  }
};
ScanResult.prototype = {};
ScanResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.results = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.TKeyValue();
          elem14.read(input);
          this.results.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.more = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanResult.prototype.write = function(output) {
  output.writeStructBegin('ScanResult');
  if (this.results) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.results.length);
    for (var iter15 in this.results)
    {
      if (this.results.hasOwnProperty(iter15))
      {
        iter15 = this.results[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.more) {
    output.writeFieldBegin('more', Thrift.Type.BOOL, 2);
    output.writeBool(this.more);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TRange = module.exports.TRange = function(args) {
  this.start = null;
  this.stop = null;
  this.startKeyInclusive = null;
  this.stopKeyInclusive = null;
  this.infiniteStartKey = null;
  this.infiniteStopKey = null;
  if (args) {
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.stop !== undefined) {
      this.stop = args.stop;
    }
    if (args.startKeyInclusive !== undefined) {
      this.startKeyInclusive = args.startKeyInclusive;
    }
    if (args.stopKeyInclusive !== undefined) {
      this.stopKeyInclusive = args.stopKeyInclusive;
    }
    if (args.infiniteStartKey !== undefined) {
      this.infiniteStartKey = args.infiniteStartKey;
    }
    if (args.infiniteStopKey !== undefined) {
      this.infiniteStopKey = args.infiniteStopKey;
    }
  }
};
TRange.prototype = {};
TRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.start = new ttypes.TKey();
        this.start.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stop = new ttypes.TKey();
        this.stop.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.startKeyInclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.stopKeyInclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.infiniteStartKey = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.infiniteStopKey = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRange.prototype.write = function(output) {
  output.writeStructBegin('TRange');
  if (this.start) {
    output.writeFieldBegin('start', Thrift.Type.STRUCT, 1);
    this.start.write(output);
    output.writeFieldEnd();
  }
  if (this.stop) {
    output.writeFieldBegin('stop', Thrift.Type.STRUCT, 2);
    this.stop.write(output);
    output.writeFieldEnd();
  }
  if (this.startKeyInclusive) {
    output.writeFieldBegin('startKeyInclusive', Thrift.Type.BOOL, 3);
    output.writeBool(this.startKeyInclusive);
    output.writeFieldEnd();
  }
  if (this.stopKeyInclusive) {
    output.writeFieldBegin('stopKeyInclusive', Thrift.Type.BOOL, 4);
    output.writeBool(this.stopKeyInclusive);
    output.writeFieldEnd();
  }
  if (this.infiniteStartKey) {
    output.writeFieldBegin('infiniteStartKey', Thrift.Type.BOOL, 5);
    output.writeBool(this.infiniteStartKey);
    output.writeFieldEnd();
  }
  if (this.infiniteStopKey) {
    output.writeFieldBegin('infiniteStopKey', Thrift.Type.BOOL, 6);
    output.writeBool(this.infiniteStopKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MultiScanResult = module.exports.MultiScanResult = function(args) {
  this.results = null;
  this.failures = null;
  this.fullScans = null;
  this.partScan = null;
  this.partNextKey = null;
  this.partNextKeyInclusive = null;
  this.more = null;
  if (args) {
    if (args.results !== undefined) {
      this.results = args.results;
    }
    if (args.failures !== undefined) {
      this.failures = args.failures;
    }
    if (args.fullScans !== undefined) {
      this.fullScans = args.fullScans;
    }
    if (args.partScan !== undefined) {
      this.partScan = args.partScan;
    }
    if (args.partNextKey !== undefined) {
      this.partNextKey = args.partNextKey;
    }
    if (args.partNextKeyInclusive !== undefined) {
      this.partNextKeyInclusive = args.partNextKeyInclusive;
    }
    if (args.more !== undefined) {
      this.more = args.more;
    }
  }
};
MultiScanResult.prototype = {};
MultiScanResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.results = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.TKeyValue();
          elem22.read(input);
          this.results.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size23 = 0;
        var _rtmp327;
        this.failures = {};
        var _ktype24 = 0;
        var _vtype25 = 0;
        _rtmp327 = input.readMapBegin();
        _ktype24 = _rtmp327.ktype;
        _vtype25 = _rtmp327.vtype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var key29 = null;
          var val30 = null;
          key29 = new ttypes.TKeyExtent();
          key29.read(input);
          var _size31 = 0;
          var _rtmp335;
          val30 = [];
          var _etype34 = 0;
          _rtmp335 = input.readListBegin();
          _etype34 = _rtmp335.etype;
          _size31 = _rtmp335.size;
          for (var _i36 = 0; _i36 < _size31; ++_i36)
          {
            var elem37 = null;
            elem37 = new ttypes.TRange();
            elem37.read(input);
            val30.push(elem37);
          }
          input.readListEnd();
          this.failures[key29] = val30;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size38 = 0;
        var _rtmp342;
        this.fullScans = [];
        var _etype41 = 0;
        _rtmp342 = input.readListBegin();
        _etype41 = _rtmp342.etype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var elem44 = null;
          elem44 = new ttypes.TKeyExtent();
          elem44.read(input);
          this.fullScans.push(elem44);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.partScan = new ttypes.TKeyExtent();
        this.partScan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.partNextKey = new ttypes.TKey();
        this.partNextKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.partNextKeyInclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.more = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MultiScanResult.prototype.write = function(output) {
  output.writeStructBegin('MultiScanResult');
  if (this.results) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.results.length);
    for (var iter45 in this.results)
    {
      if (this.results.hasOwnProperty(iter45))
      {
        iter45 = this.results[iter45];
        iter45.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failures) {
    output.writeFieldBegin('failures', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.LIST, Thrift.objectLength(this.failures));
    for (var kiter46 in this.failures)
    {
      if (this.failures.hasOwnProperty(kiter46))
      {
        var viter47 = this.failures[kiter46];
        kiter46.write(output);
        output.writeListBegin(Thrift.Type.STRUCT, viter47.length);
        for (var iter48 in viter47)
        {
          if (viter47.hasOwnProperty(iter48))
          {
            iter48 = viter47[iter48];
            iter48.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.fullScans) {
    output.writeFieldBegin('fullScans', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.fullScans.length);
    for (var iter49 in this.fullScans)
    {
      if (this.fullScans.hasOwnProperty(iter49))
      {
        iter49 = this.fullScans[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.partScan) {
    output.writeFieldBegin('partScan', Thrift.Type.STRUCT, 4);
    this.partScan.write(output);
    output.writeFieldEnd();
  }
  if (this.partNextKey) {
    output.writeFieldBegin('partNextKey', Thrift.Type.STRUCT, 5);
    this.partNextKey.write(output);
    output.writeFieldEnd();
  }
  if (this.partNextKeyInclusive) {
    output.writeFieldBegin('partNextKeyInclusive', Thrift.Type.BOOL, 6);
    output.writeBool(this.partNextKeyInclusive);
    output.writeFieldEnd();
  }
  if (this.more) {
    output.writeFieldBegin('more', Thrift.Type.BOOL, 7);
    output.writeBool(this.more);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InitialScan = module.exports.InitialScan = function(args) {
  this.scanID = null;
  this.result = null;
  if (args) {
    if (args.scanID !== undefined) {
      this.scanID = args.scanID;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
InitialScan.prototype = {};
InitialScan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new ttypes.ScanResult();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InitialScan.prototype.write = function(output) {
  output.writeStructBegin('InitialScan');
  if (this.scanID) {
    output.writeFieldBegin('scanID', Thrift.Type.I64, 1);
    output.writeI64(this.scanID);
    output.writeFieldEnd();
  }
  if (this.result) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 2);
    this.result.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InitialMultiScan = module.exports.InitialMultiScan = function(args) {
  this.scanID = null;
  this.result = null;
  if (args) {
    if (args.scanID !== undefined) {
      this.scanID = args.scanID;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
  }
};
InitialMultiScan.prototype = {};
InitialMultiScan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new ttypes.MultiScanResult();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InitialMultiScan.prototype.write = function(output) {
  output.writeStructBegin('InitialMultiScan');
  if (this.scanID) {
    output.writeFieldBegin('scanID', Thrift.Type.I64, 1);
    output.writeI64(this.scanID);
    output.writeFieldEnd();
  }
  if (this.result) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 2);
    this.result.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IterInfo = module.exports.IterInfo = function(args) {
  this.priority = null;
  this.className = null;
  this.iterName = null;
  if (args) {
    if (args.priority !== undefined) {
      this.priority = args.priority;
    }
    if (args.className !== undefined) {
      this.className = args.className;
    }
    if (args.iterName !== undefined) {
      this.iterName = args.iterName;
    }
  }
};
IterInfo.prototype = {};
IterInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.className = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.iterName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IterInfo.prototype.write = function(output) {
  output.writeStructBegin('IterInfo');
  if (this.priority) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 1);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.className) {
    output.writeFieldBegin('className', Thrift.Type.STRING, 2);
    output.writeString(this.className);
    output.writeFieldEnd();
  }
  if (this.iterName) {
    output.writeFieldBegin('iterName', Thrift.Type.STRING, 3);
    output.writeString(this.iterName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TConstraintViolationSummary = module.exports.TConstraintViolationSummary = function(args) {
  this.constrainClass = null;
  this.violationCode = null;
  this.violationDescription = null;
  this.numberOfViolatingMutations = null;
  if (args) {
    if (args.constrainClass !== undefined) {
      this.constrainClass = args.constrainClass;
    }
    if (args.violationCode !== undefined) {
      this.violationCode = args.violationCode;
    }
    if (args.violationDescription !== undefined) {
      this.violationDescription = args.violationDescription;
    }
    if (args.numberOfViolatingMutations !== undefined) {
      this.numberOfViolatingMutations = args.numberOfViolatingMutations;
    }
  }
};
TConstraintViolationSummary.prototype = {};
TConstraintViolationSummary.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.constrainClass = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.violationCode = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.violationDescription = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numberOfViolatingMutations = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TConstraintViolationSummary.prototype.write = function(output) {
  output.writeStructBegin('TConstraintViolationSummary');
  if (this.constrainClass) {
    output.writeFieldBegin('constrainClass', Thrift.Type.STRING, 1);
    output.writeString(this.constrainClass);
    output.writeFieldEnd();
  }
  if (this.violationCode) {
    output.writeFieldBegin('violationCode', Thrift.Type.I16, 2);
    output.writeI16(this.violationCode);
    output.writeFieldEnd();
  }
  if (this.violationDescription) {
    output.writeFieldBegin('violationDescription', Thrift.Type.STRING, 3);
    output.writeString(this.violationDescription);
    output.writeFieldEnd();
  }
  if (this.numberOfViolatingMutations) {
    output.writeFieldBegin('numberOfViolatingMutations', Thrift.Type.I64, 4);
    output.writeI64(this.numberOfViolatingMutations);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateErrors = module.exports.UpdateErrors = function(args) {
  this.failedExtents = null;
  this.violationSummaries = null;
  this.authorizationFailures = null;
  if (args) {
    if (args.failedExtents !== undefined) {
      this.failedExtents = args.failedExtents;
    }
    if (args.violationSummaries !== undefined) {
      this.violationSummaries = args.violationSummaries;
    }
    if (args.authorizationFailures !== undefined) {
      this.authorizationFailures = args.authorizationFailures;
    }
  }
};
UpdateErrors.prototype = {};
UpdateErrors.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size50 = 0;
        var _rtmp354;
        this.failedExtents = {};
        var _ktype51 = 0;
        var _vtype52 = 0;
        _rtmp354 = input.readMapBegin();
        _ktype51 = _rtmp354.ktype;
        _vtype52 = _rtmp354.vtype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var key56 = null;
          var val57 = null;
          key56 = new ttypes.TKeyExtent();
          key56.read(input);
          val57 = input.readI64();
          this.failedExtents[key56] = val57;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.violationSummaries = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = new ttypes.TConstraintViolationSummary();
          elem64.read(input);
          this.violationSummaries.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size65 = 0;
        var _rtmp369;
        this.authorizationFailures = [];
        var _etype68 = 0;
        _rtmp369 = input.readListBegin();
        _etype68 = _rtmp369.etype;
        _size65 = _rtmp369.size;
        for (var _i70 = 0; _i70 < _size65; ++_i70)
        {
          var elem71 = null;
          elem71 = new ttypes.TKeyExtent();
          elem71.read(input);
          this.authorizationFailures.push(elem71);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateErrors.prototype.write = function(output) {
  output.writeStructBegin('UpdateErrors');
  if (this.failedExtents) {
    output.writeFieldBegin('failedExtents', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.I64, Thrift.objectLength(this.failedExtents));
    for (var kiter72 in this.failedExtents)
    {
      if (this.failedExtents.hasOwnProperty(kiter72))
      {
        var viter73 = this.failedExtents[kiter72];
        kiter72.write(output);
        output.writeI64(viter73);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.violationSummaries) {
    output.writeFieldBegin('violationSummaries', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.violationSummaries.length);
    for (var iter74 in this.violationSummaries)
    {
      if (this.violationSummaries.hasOwnProperty(iter74))
      {
        iter74 = this.violationSummaries[iter74];
        iter74.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.authorizationFailures) {
    output.writeFieldBegin('authorizationFailures', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.authorizationFailures.length);
    for (var iter75 in this.authorizationFailures)
    {
      if (this.authorizationFailures.hasOwnProperty(iter75))
      {
        iter75 = this.authorizationFailures[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MapFileInfo = module.exports.MapFileInfo = function(args) {
  this.estimatedSize = null;
  if (args) {
    if (args.estimatedSize !== undefined) {
      this.estimatedSize = args.estimatedSize;
    }
  }
};
MapFileInfo.prototype = {};
MapFileInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.estimatedSize = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapFileInfo.prototype.write = function(output) {
  output.writeStructBegin('MapFileInfo');
  if (this.estimatedSize) {
    output.writeFieldBegin('estimatedSize', Thrift.Type.I64, 1);
    output.writeI64(this.estimatedSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

