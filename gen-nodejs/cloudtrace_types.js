//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
var RemoteSpan = module.exports.RemoteSpan = function(args) {
  this.sender = null;
  this.svc = null;
  this.traceId = null;
  this.spanId = null;
  this.parentId = null;
  this.start = null;
  this.stop = null;
  this.description = null;
  this.data = null;
  if (args) {
    if (args.sender !== undefined) {
      this.sender = args.sender;
    }
    if (args.svc !== undefined) {
      this.svc = args.svc;
    }
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
    if (args.spanId !== undefined) {
      this.spanId = args.spanId;
    }
    if (args.parentId !== undefined) {
      this.parentId = args.parentId;
    }
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.stop !== undefined) {
      this.stop = args.stop;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
RemoteSpan.prototype = {};
RemoteSpan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sender = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.svc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.traceId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.spanId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.parentId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.stop = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.data = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.data[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteSpan.prototype.write = function(output) {
  output.writeStructBegin('RemoteSpan');
  if (this.sender) {
    output.writeFieldBegin('sender', Thrift.Type.STRING, 1);
    output.writeString(this.sender);
    output.writeFieldEnd();
  }
  if (this.svc) {
    output.writeFieldBegin('svc', Thrift.Type.STRING, 2);
    output.writeString(this.svc);
    output.writeFieldEnd();
  }
  if (this.traceId) {
    output.writeFieldBegin('traceId', Thrift.Type.I64, 3);
    output.writeI64(this.traceId);
    output.writeFieldEnd();
  }
  if (this.spanId) {
    output.writeFieldBegin('spanId', Thrift.Type.I64, 4);
    output.writeI64(this.spanId);
    output.writeFieldEnd();
  }
  if (this.parentId) {
    output.writeFieldBegin('parentId', Thrift.Type.I64, 5);
    output.writeI64(this.parentId);
    output.writeFieldEnd();
  }
  if (this.start) {
    output.writeFieldBegin('start', Thrift.Type.I64, 6);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.stop) {
    output.writeFieldBegin('stop', Thrift.Type.I64, 7);
    output.writeI64(this.stop);
    output.writeFieldEnd();
  }
  if (this.description) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 8);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.data) {
    output.writeFieldBegin('data', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.data));
    for (var kiter8 in this.data)
    {
      if (this.data.hasOwnProperty(kiter8))
      {
        var viter9 = this.data[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TInfo = module.exports.TInfo = function(args) {
  this.traceId = null;
  this.parentId = null;
  if (args) {
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
    if (args.parentId !== undefined) {
      this.parentId = args.parentId;
    }
  }
};
TInfo.prototype = {};
TInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.traceId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.parentId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TInfo.prototype.write = function(output) {
  output.writeStructBegin('TInfo');
  if (this.traceId) {
    output.writeFieldBegin('traceId', Thrift.Type.I64, 1);
    output.writeI64(this.traceId);
    output.writeFieldEnd();
  }
  if (this.parentId) {
    output.writeFieldBegin('parentId', Thrift.Type.I64, 2);
    output.writeI64(this.parentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

