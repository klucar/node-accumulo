//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
var GcCycleStats = module.exports.GcCycleStats = function(args) {
  this.started = null;
  this.finished = null;
  this.candidates = null;
  this.inUse = null;
  this.deleted = null;
  this.errors = null;
  if (args) {
    if (args.started !== undefined) {
      this.started = args.started;
    }
    if (args.finished !== undefined) {
      this.finished = args.finished;
    }
    if (args.candidates !== undefined) {
      this.candidates = args.candidates;
    }
    if (args.inUse !== undefined) {
      this.inUse = args.inUse;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.errors !== undefined) {
      this.errors = args.errors;
    }
  }
};
GcCycleStats.prototype = {};
GcCycleStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.started = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.finished = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.candidates = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.inUse = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.errors = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GcCycleStats.prototype.write = function(output) {
  output.writeStructBegin('GcCycleStats');
  if (this.started) {
    output.writeFieldBegin('started', Thrift.Type.I64, 1);
    output.writeI64(this.started);
    output.writeFieldEnd();
  }
  if (this.finished) {
    output.writeFieldBegin('finished', Thrift.Type.I64, 2);
    output.writeI64(this.finished);
    output.writeFieldEnd();
  }
  if (this.candidates) {
    output.writeFieldBegin('candidates', Thrift.Type.I64, 3);
    output.writeI64(this.candidates);
    output.writeFieldEnd();
  }
  if (this.inUse) {
    output.writeFieldBegin('inUse', Thrift.Type.I64, 4);
    output.writeI64(this.inUse);
    output.writeFieldEnd();
  }
  if (this.deleted) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 5);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.errors) {
    output.writeFieldBegin('errors', Thrift.Type.I64, 6);
    output.writeI64(this.errors);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GCStatus = module.exports.GCStatus = function(args) {
  this.last = null;
  this.lastLog = null;
  this.current = null;
  this.currentLog = null;
  if (args) {
    if (args.last !== undefined) {
      this.last = args.last;
    }
    if (args.lastLog !== undefined) {
      this.lastLog = args.lastLog;
    }
    if (args.current !== undefined) {
      this.current = args.current;
    }
    if (args.currentLog !== undefined) {
      this.currentLog = args.currentLog;
    }
  }
};
GCStatus.prototype = {};
GCStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.last = new ttypes.GcCycleStats();
        this.last.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastLog = new ttypes.GcCycleStats();
        this.lastLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.current = new ttypes.GcCycleStats();
        this.current.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.currentLog = new ttypes.GcCycleStats();
        this.currentLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GCStatus.prototype.write = function(output) {
  output.writeStructBegin('GCStatus');
  if (this.last) {
    output.writeFieldBegin('last', Thrift.Type.STRUCT, 1);
    this.last.write(output);
    output.writeFieldEnd();
  }
  if (this.lastLog) {
    output.writeFieldBegin('lastLog', Thrift.Type.STRUCT, 2);
    this.lastLog.write(output);
    output.writeFieldEnd();
  }
  if (this.current) {
    output.writeFieldBegin('current', Thrift.Type.STRUCT, 3);
    this.current.write(output);
    output.writeFieldEnd();
  }
  if (this.currentLog) {
    output.writeFieldBegin('currentLog', Thrift.Type.STRUCT, 4);
    this.currentLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

