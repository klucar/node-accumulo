//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.MasterState = {
'INITIAL' : 0,
'HAVE_LOCK' : 1,
'SAFE_MODE' : 2,
'NORMAL' : 3,
'UNLOAD_METADATA_TABLETS' : 4,
'UNLOAD_ROOT_TABLET' : 5,
'STOP' : 6
};
ttypes.MasterGoalState = {
'CLEAN_STOP' : 0,
'SAFE_MODE' : 1,
'NORMAL' : 2
};
ttypes.TabletLoadState = {
'LOADED' : 0,
'LOAD_FAILURE' : 1,
'UNLOADED' : 2,
'UNLOAD_FAILURE_NOT_SERVING' : 3,
'UNLOAD_ERROR' : 4,
'CHOPPED' : 5
};
ttypes.TableOperation = {
'CREATE' : 0,
'CLONE' : 1,
'DELETE' : 2,
'RENAME' : 3,
'ONLINE' : 4,
'OFFLINE' : 5,
'MERGE' : 6,
'DELETE_RANGE' : 7,
'BULK_IMPORT' : 8,
'COMPACT' : 9
};
var Compacting = module.exports.Compacting = function(args) {
  this.running = null;
  this.queued = null;
  if (args) {
    if (args.running !== undefined) {
      this.running = args.running;
    }
    if (args.queued !== undefined) {
      this.queued = args.queued;
    }
  }
};
Compacting.prototype = {};
Compacting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.running = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.queued = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Compacting.prototype.write = function(output) {
  output.writeStructBegin('Compacting');
  if (this.running) {
    output.writeFieldBegin('running', Thrift.Type.I32, 1);
    output.writeI32(this.running);
    output.writeFieldEnd();
  }
  if (this.queued) {
    output.writeFieldBegin('queued', Thrift.Type.I32, 2);
    output.writeI32(this.queued);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TableInfo = module.exports.TableInfo = function(args) {
  this.recs = null;
  this.recsInMemory = null;
  this.tablets = null;
  this.onlineTablets = null;
  this.ingestRate = null;
  this.ingestByteRate = null;
  this.queryRate = null;
  this.queryByteRate = null;
  this.minor = null;
  this.major = null;
  this.scans = null;
  if (args) {
    if (args.recs !== undefined) {
      this.recs = args.recs;
    }
    if (args.recsInMemory !== undefined) {
      this.recsInMemory = args.recsInMemory;
    }
    if (args.tablets !== undefined) {
      this.tablets = args.tablets;
    }
    if (args.onlineTablets !== undefined) {
      this.onlineTablets = args.onlineTablets;
    }
    if (args.ingestRate !== undefined) {
      this.ingestRate = args.ingestRate;
    }
    if (args.ingestByteRate !== undefined) {
      this.ingestByteRate = args.ingestByteRate;
    }
    if (args.queryRate !== undefined) {
      this.queryRate = args.queryRate;
    }
    if (args.queryByteRate !== undefined) {
      this.queryByteRate = args.queryByteRate;
    }
    if (args.minor !== undefined) {
      this.minor = args.minor;
    }
    if (args.major !== undefined) {
      this.major = args.major;
    }
    if (args.scans !== undefined) {
      this.scans = args.scans;
    }
  }
};
TableInfo.prototype = {};
TableInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.recs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.recsInMemory = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tablets = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.onlineTablets = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.ingestRate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.ingestByteRate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.queryRate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.queryByteRate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.minor = new ttypes.Compacting();
        this.minor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.major = new ttypes.Compacting();
        this.major.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.scans = new ttypes.Compacting();
        this.scans.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableInfo.prototype.write = function(output) {
  output.writeStructBegin('TableInfo');
  if (this.recs) {
    output.writeFieldBegin('recs', Thrift.Type.I64, 1);
    output.writeI64(this.recs);
    output.writeFieldEnd();
  }
  if (this.recsInMemory) {
    output.writeFieldBegin('recsInMemory', Thrift.Type.I64, 2);
    output.writeI64(this.recsInMemory);
    output.writeFieldEnd();
  }
  if (this.tablets) {
    output.writeFieldBegin('tablets', Thrift.Type.I32, 3);
    output.writeI32(this.tablets);
    output.writeFieldEnd();
  }
  if (this.onlineTablets) {
    output.writeFieldBegin('onlineTablets', Thrift.Type.I32, 4);
    output.writeI32(this.onlineTablets);
    output.writeFieldEnd();
  }
  if (this.ingestRate) {
    output.writeFieldBegin('ingestRate', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.ingestRate);
    output.writeFieldEnd();
  }
  if (this.ingestByteRate) {
    output.writeFieldBegin('ingestByteRate', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.ingestByteRate);
    output.writeFieldEnd();
  }
  if (this.queryRate) {
    output.writeFieldBegin('queryRate', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.queryRate);
    output.writeFieldEnd();
  }
  if (this.queryByteRate) {
    output.writeFieldBegin('queryByteRate', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.queryByteRate);
    output.writeFieldEnd();
  }
  if (this.minor) {
    output.writeFieldBegin('minor', Thrift.Type.STRUCT, 9);
    this.minor.write(output);
    output.writeFieldEnd();
  }
  if (this.major) {
    output.writeFieldBegin('major', Thrift.Type.STRUCT, 10);
    this.major.write(output);
    output.writeFieldEnd();
  }
  if (this.scans) {
    output.writeFieldBegin('scans', Thrift.Type.STRUCT, 11);
    this.scans.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecoveryStatus = module.exports.RecoveryStatus = function(args) {
  this.host = null;
  this.name = null;
  this.mapProgress = null;
  this.reduceProgress = null;
  this.runtime = null;
  this.copyProgress = null;
  if (args) {
    if (args.host !== undefined) {
      this.host = args.host;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.mapProgress !== undefined) {
      this.mapProgress = args.mapProgress;
    }
    if (args.reduceProgress !== undefined) {
      this.reduceProgress = args.reduceProgress;
    }
    if (args.runtime !== undefined) {
      this.runtime = args.runtime;
    }
    if (args.copyProgress !== undefined) {
      this.copyProgress = args.copyProgress;
    }
  }
};
RecoveryStatus.prototype = {};
RecoveryStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.mapProgress = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.reduceProgress = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.runtime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.copyProgress = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecoveryStatus.prototype.write = function(output) {
  output.writeStructBegin('RecoveryStatus');
  if (this.host) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.mapProgress) {
    output.writeFieldBegin('mapProgress', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.mapProgress);
    output.writeFieldEnd();
  }
  if (this.reduceProgress) {
    output.writeFieldBegin('reduceProgress', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.reduceProgress);
    output.writeFieldEnd();
  }
  if (this.runtime) {
    output.writeFieldBegin('runtime', Thrift.Type.I32, 5);
    output.writeI32(this.runtime);
    output.writeFieldEnd();
  }
  if (this.copyProgress) {
    output.writeFieldBegin('copyProgress', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.copyProgress);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoggerStatus = module.exports.LoggerStatus = function(args) {
  this.logger = null;
  if (args) {
    if (args.logger !== undefined) {
      this.logger = args.logger;
    }
  }
};
LoggerStatus.prototype = {};
LoggerStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.logger = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoggerStatus.prototype.write = function(output) {
  output.writeStructBegin('LoggerStatus');
  if (this.logger) {
    output.writeFieldBegin('logger', Thrift.Type.STRING, 1);
    output.writeString(this.logger);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletServerStatus = module.exports.TabletServerStatus = function(args) {
  this.tableMap = null;
  this.lastContact = null;
  this.name = null;
  this.osLoad = null;
  this.holdTime = null;
  this.lookups = null;
  this.loggers = null;
  this.indexCacheHits = null;
  this.indexCacheRequest = null;
  this.dataCacheHits = null;
  this.dataCacheRequest = null;
  if (args) {
    if (args.tableMap !== undefined) {
      this.tableMap = args.tableMap;
    }
    if (args.lastContact !== undefined) {
      this.lastContact = args.lastContact;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.osLoad !== undefined) {
      this.osLoad = args.osLoad;
    }
    if (args.holdTime !== undefined) {
      this.holdTime = args.holdTime;
    }
    if (args.lookups !== undefined) {
      this.lookups = args.lookups;
    }
    if (args.loggers !== undefined) {
      this.loggers = args.loggers;
    }
    if (args.indexCacheHits !== undefined) {
      this.indexCacheHits = args.indexCacheHits;
    }
    if (args.indexCacheRequest !== undefined) {
      this.indexCacheRequest = args.indexCacheRequest;
    }
    if (args.dataCacheHits !== undefined) {
      this.dataCacheHits = args.dataCacheHits;
    }
    if (args.dataCacheRequest !== undefined) {
      this.dataCacheRequest = args.dataCacheRequest;
    }
  }
};
TabletServerStatus.prototype = {};
TabletServerStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.tableMap = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = new ttypes.TableInfo();
          val7.read(input);
          this.tableMap[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastContact = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.osLoad = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.holdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.lookups = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.SET) {
        var _size8 = 0;
        var _rtmp312;
        this.loggers = [];
        var _etype11 = 0;
        _rtmp312 = input.readSetBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.loggers.push(elem14);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.indexCacheHits = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.indexCacheRequest = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.dataCacheHits = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.dataCacheRequest = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletServerStatus.prototype.write = function(output) {
  output.writeStructBegin('TabletServerStatus');
  if (this.tableMap) {
    output.writeFieldBegin('tableMap', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.tableMap));
    for (var kiter15 in this.tableMap)
    {
      if (this.tableMap.hasOwnProperty(kiter15))
      {
        var viter16 = this.tableMap[kiter15];
        output.writeString(kiter15);
        viter16.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.lastContact) {
    output.writeFieldBegin('lastContact', Thrift.Type.I64, 2);
    output.writeI64(this.lastContact);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.osLoad) {
    output.writeFieldBegin('osLoad', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.osLoad);
    output.writeFieldEnd();
  }
  if (this.holdTime) {
    output.writeFieldBegin('holdTime', Thrift.Type.I64, 7);
    output.writeI64(this.holdTime);
    output.writeFieldEnd();
  }
  if (this.lookups) {
    output.writeFieldBegin('lookups', Thrift.Type.I64, 8);
    output.writeI64(this.lookups);
    output.writeFieldEnd();
  }
  if (this.loggers) {
    output.writeFieldBegin('loggers', Thrift.Type.SET, 9);
    output.writeSetBegin(Thrift.Type.STRING, this.loggers.length);
    for (var iter17 in this.loggers)
    {
      if (this.loggers.hasOwnProperty(iter17))
      {
        iter17 = this.loggers[iter17];
        output.writeString(iter17);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.indexCacheHits) {
    output.writeFieldBegin('indexCacheHits', Thrift.Type.I64, 10);
    output.writeI64(this.indexCacheHits);
    output.writeFieldEnd();
  }
  if (this.indexCacheRequest) {
    output.writeFieldBegin('indexCacheRequest', Thrift.Type.I64, 11);
    output.writeI64(this.indexCacheRequest);
    output.writeFieldEnd();
  }
  if (this.dataCacheHits) {
    output.writeFieldBegin('dataCacheHits', Thrift.Type.I64, 12);
    output.writeI64(this.dataCacheHits);
    output.writeFieldEnd();
  }
  if (this.dataCacheRequest) {
    output.writeFieldBegin('dataCacheRequest', Thrift.Type.I64, 13);
    output.writeI64(this.dataCacheRequest);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeadServer = module.exports.DeadServer = function(args) {
  this.server = null;
  this.lastStatus = null;
  this.status = null;
  if (args) {
    if (args.server !== undefined) {
      this.server = args.server;
    }
    if (args.lastStatus !== undefined) {
      this.lastStatus = args.lastStatus;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
DeadServer.prototype = {};
DeadServer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.server = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastStatus = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeadServer.prototype.write = function(output) {
  output.writeStructBegin('DeadServer');
  if (this.server) {
    output.writeFieldBegin('server', Thrift.Type.STRING, 1);
    output.writeString(this.server);
    output.writeFieldEnd();
  }
  if (this.lastStatus) {
    output.writeFieldBegin('lastStatus', Thrift.Type.I64, 2);
    output.writeI64(this.lastStatus);
    output.writeFieldEnd();
  }
  if (this.status) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 3);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterMonitorInfo = module.exports.MasterMonitorInfo = function(args) {
  this.tableMap = null;
  this.tServerInfo = null;
  this.badTServers = null;
  this.recovery = null;
  this.loggers = null;
  this.state = null;
  this.goalState = null;
  this.unassignedTablets = null;
  this.serversShuttingDown = null;
  this.deadTabletServers = null;
  this.deadLoggers = null;
  if (args) {
    if (args.tableMap !== undefined) {
      this.tableMap = args.tableMap;
    }
    if (args.tServerInfo !== undefined) {
      this.tServerInfo = args.tServerInfo;
    }
    if (args.badTServers !== undefined) {
      this.badTServers = args.badTServers;
    }
    if (args.recovery !== undefined) {
      this.recovery = args.recovery;
    }
    if (args.loggers !== undefined) {
      this.loggers = args.loggers;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.goalState !== undefined) {
      this.goalState = args.goalState;
    }
    if (args.unassignedTablets !== undefined) {
      this.unassignedTablets = args.unassignedTablets;
    }
    if (args.serversShuttingDown !== undefined) {
      this.serversShuttingDown = args.serversShuttingDown;
    }
    if (args.deadTabletServers !== undefined) {
      this.deadTabletServers = args.deadTabletServers;
    }
    if (args.deadLoggers !== undefined) {
      this.deadLoggers = args.deadLoggers;
    }
  }
};
MasterMonitorInfo.prototype = {};
MasterMonitorInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size18 = 0;
        var _rtmp322;
        this.tableMap = {};
        var _ktype19 = 0;
        var _vtype20 = 0;
        _rtmp322 = input.readMapBegin();
        _ktype19 = _rtmp322.ktype;
        _vtype20 = _rtmp322.vtype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var key24 = null;
          var val25 = null;
          key24 = input.readString();
          val25 = new ttypes.TableInfo();
          val25.read(input);
          this.tableMap[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.tServerInfo = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = new ttypes.TabletServerStatus();
          elem32.read(input);
          this.tServerInfo.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size33 = 0;
        var _rtmp337;
        this.badTServers = {};
        var _ktype34 = 0;
        var _vtype35 = 0;
        _rtmp337 = input.readMapBegin();
        _ktype34 = _rtmp337.ktype;
        _vtype35 = _rtmp337.vtype;
        _size33 = _rtmp337.size;
        for (var _i38 = 0; _i38 < _size33; ++_i38)
        {
          var key39 = null;
          var val40 = null;
          key39 = input.readString();
          val40 = input.readByte();
          this.badTServers[key39] = val40;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size41 = 0;
        var _rtmp345;
        this.recovery = [];
        var _etype44 = 0;
        _rtmp345 = input.readListBegin();
        _etype44 = _rtmp345.etype;
        _size41 = _rtmp345.size;
        for (var _i46 = 0; _i46 < _size41; ++_i46)
        {
          var elem47 = null;
          elem47 = new ttypes.RecoveryStatus();
          elem47.read(input);
          this.recovery.push(elem47);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.loggers = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.LoggerStatus();
          elem54.read(input);
          this.loggers.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.goalState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.unassignedTablets = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.SET) {
        var _size55 = 0;
        var _rtmp359;
        this.serversShuttingDown = [];
        var _etype58 = 0;
        _rtmp359 = input.readSetBegin();
        _etype58 = _rtmp359.etype;
        _size55 = _rtmp359.size;
        for (var _i60 = 0; _i60 < _size55; ++_i60)
        {
          var elem61 = null;
          elem61 = input.readString();
          this.serversShuttingDown.push(elem61);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.deadTabletServers = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = new ttypes.DeadServer();
          elem68.read(input);
          this.deadTabletServers.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size69 = 0;
        var _rtmp373;
        this.deadLoggers = [];
        var _etype72 = 0;
        _rtmp373 = input.readListBegin();
        _etype72 = _rtmp373.etype;
        _size69 = _rtmp373.size;
        for (var _i74 = 0; _i74 < _size69; ++_i74)
        {
          var elem75 = null;
          elem75 = new ttypes.DeadServer();
          elem75.read(input);
          this.deadLoggers.push(elem75);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterMonitorInfo.prototype.write = function(output) {
  output.writeStructBegin('MasterMonitorInfo');
  if (this.tableMap) {
    output.writeFieldBegin('tableMap', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.tableMap));
    for (var kiter76 in this.tableMap)
    {
      if (this.tableMap.hasOwnProperty(kiter76))
      {
        var viter77 = this.tableMap[kiter76];
        output.writeString(kiter76);
        viter77.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tServerInfo) {
    output.writeFieldBegin('tServerInfo', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tServerInfo.length);
    for (var iter78 in this.tServerInfo)
    {
      if (this.tServerInfo.hasOwnProperty(iter78))
      {
        iter78 = this.tServerInfo[iter78];
        iter78.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.badTServers) {
    output.writeFieldBegin('badTServers', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.BYTE, Thrift.objectLength(this.badTServers));
    for (var kiter79 in this.badTServers)
    {
      if (this.badTServers.hasOwnProperty(kiter79))
      {
        var viter80 = this.badTServers[kiter79];
        output.writeString(kiter79);
        output.writeByte(viter80);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.recovery) {
    output.writeFieldBegin('recovery', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.recovery.length);
    for (var iter81 in this.recovery)
    {
      if (this.recovery.hasOwnProperty(iter81))
      {
        iter81 = this.recovery[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.loggers) {
    output.writeFieldBegin('loggers', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.loggers.length);
    for (var iter82 in this.loggers)
    {
      if (this.loggers.hasOwnProperty(iter82))
      {
        iter82 = this.loggers[iter82];
        iter82.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.state) {
    output.writeFieldBegin('state', Thrift.Type.I32, 6);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.goalState) {
    output.writeFieldBegin('goalState', Thrift.Type.I32, 8);
    output.writeI32(this.goalState);
    output.writeFieldEnd();
  }
  if (this.unassignedTablets) {
    output.writeFieldBegin('unassignedTablets', Thrift.Type.I32, 7);
    output.writeI32(this.unassignedTablets);
    output.writeFieldEnd();
  }
  if (this.serversShuttingDown) {
    output.writeFieldBegin('serversShuttingDown', Thrift.Type.SET, 9);
    output.writeSetBegin(Thrift.Type.STRING, this.serversShuttingDown.length);
    for (var iter83 in this.serversShuttingDown)
    {
      if (this.serversShuttingDown.hasOwnProperty(iter83))
      {
        iter83 = this.serversShuttingDown[iter83];
        output.writeString(iter83);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.deadTabletServers) {
    output.writeFieldBegin('deadTabletServers', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.deadTabletServers.length);
    for (var iter84 in this.deadTabletServers)
    {
      if (this.deadTabletServers.hasOwnProperty(iter84))
      {
        iter84 = this.deadTabletServers[iter84];
        iter84.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deadLoggers) {
    output.writeFieldBegin('deadLoggers', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.deadLoggers.length);
    for (var iter85 in this.deadLoggers)
    {
      if (this.deadLoggers.hasOwnProperty(iter85))
      {
        iter85 = this.deadLoggers[iter85];
        iter85.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletSplit = module.exports.TabletSplit = function(args) {
  this.oldTablet = null;
  this.newTablets = null;
  if (args) {
    if (args.oldTablet !== undefined) {
      this.oldTablet = args.oldTablet;
    }
    if (args.newTablets !== undefined) {
      this.newTablets = args.newTablets;
    }
  }
};
TabletSplit.prototype = {};
TabletSplit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.oldTablet = new data_ttypes.TKeyExtent();
        this.oldTablet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size86 = 0;
        var _rtmp390;
        this.newTablets = [];
        var _etype89 = 0;
        _rtmp390 = input.readListBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = new data_ttypes.TKeyExtent();
          elem92.read(input);
          this.newTablets.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletSplit.prototype.write = function(output) {
  output.writeStructBegin('TabletSplit');
  if (this.oldTablet) {
    output.writeFieldBegin('oldTablet', Thrift.Type.STRUCT, 1);
    this.oldTablet.write(output);
    output.writeFieldEnd();
  }
  if (this.newTablets) {
    output.writeFieldBegin('newTablets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.newTablets.length);
    for (var iter93 in this.newTablets)
    {
      if (this.newTablets.hasOwnProperty(iter93))
      {
        iter93 = this.newTablets[iter93];
        iter93.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecoveryException = module.exports.RecoveryException = function(args) {
  Thrift.TException.call(this, "RecoveryException")
  this.name = "RecoveryException"
  this.why = null;
  if (args) {
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(RecoveryException, Thrift.TException);
RecoveryException.prototype.name = 'RecoveryException';
RecoveryException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecoveryException.prototype.write = function(output) {
  output.writeStructBegin('RecoveryException');
  if (this.why) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

