//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.TableOperation = {
'CREATE' : 0,
'DELETE' : 1,
'RENAME' : 2,
'SET_PROPERTY' : 3,
'REMOVE_PROPERTY' : 4,
'OFFLINE' : 5,
'ONLINE' : 6,
'FLUSH' : 7,
'PERMISSION' : 8,
'CLONE' : 9,
'MERGE' : 10,
'DELETE_RANGE' : 11,
'BULK_IMPORT' : 12,
'COMPACT' : 13
};
ttypes.TableOperationExceptionType = {
'EXISTS' : 0,
'NOTFOUND' : 1,
'OFFLINE' : 2,
'BULK_BAD_INPUT_DIRECTORY' : 3,
'BULK_BAD_ERROR_DIRECTORY' : 4,
'BAD_RANGE' : 5,
'OTHER' : 6
};
ttypes.ConfigurationType = {
'CURRENT' : 0,
'SITE' : 1,
'DEFAULT' : 2
};
var ThriftTableOperationException = module.exports.ThriftTableOperationException = function(args) {
  Thrift.TException.call(this, "ThriftTableOperationException")
  this.name = "ThriftTableOperationException"
  this.tableId = null;
  this.tableName = null;
  this.op = null;
  this.type = null;
  this.description = null;
  if (args) {
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.op !== undefined) {
      this.op = args.op;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
  }
};
Thrift.inherits(ThriftTableOperationException, Thrift.TException);
ThriftTableOperationException.prototype.name = 'ThriftTableOperationException';
ThriftTableOperationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.op = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTableOperationException.prototype.write = function(output) {
  output.writeStructBegin('ThriftTableOperationException');
  if (this.tableId) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 1);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.op) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.description) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 5);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

