//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var data_ttypes = require('./data_types')
var security_ttypes = require('./security_types')
var client_ttypes = require('./client_types')
var cloudtrace_ttypes = require('./cloudtrace_types')


var ttypes = require('./master_types');
//HELPER FUNCTIONS AND STRUCTURES

var MasterClientService_initiateFlush_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.tableName = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
MasterClientService_initiateFlush_args.prototype = {};
MasterClientService_initiateFlush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_initiateFlush_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_initiateFlush_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_initiateFlush_result = function(args) {
  this.success = null;
  this.sec = null;
  this.tope = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.tope !== undefined) {
      this.tope = args.tope;
    }
  }
};
MasterClientService_initiateFlush_result.prototype = {};
MasterClientService_initiateFlush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tope = new client_ttypes.ThriftTableOperationException();
        this.tope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_initiateFlush_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_initiateFlush_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.tope) {
    output.writeFieldBegin('tope', Thrift.Type.STRUCT, 2);
    this.tope.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_waitForFlush_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.tableName = null;
  this.startRow = null;
  this.endRow = null;
  this.flushID = null;
  this.maxLoops = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.endRow !== undefined) {
      this.endRow = args.endRow;
    }
    if (args.flushID !== undefined) {
      this.flushID = args.flushID;
    }
    if (args.maxLoops !== undefined) {
      this.maxLoops = args.maxLoops;
    }
  }
};
MasterClientService_waitForFlush_args.prototype = {};
MasterClientService_waitForFlush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.endRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.flushID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.maxLoops = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_waitForFlush_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_waitForFlush_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 6);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.endRow) {
    output.writeFieldBegin('endRow', Thrift.Type.STRING, 7);
    output.writeString(this.endRow);
    output.writeFieldEnd();
  }
  if (this.flushID) {
    output.writeFieldBegin('flushID', Thrift.Type.I64, 3);
    output.writeI64(this.flushID);
    output.writeFieldEnd();
  }
  if (this.maxLoops) {
    output.writeFieldBegin('maxLoops', Thrift.Type.I64, 4);
    output.writeI64(this.maxLoops);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_waitForFlush_result = function(args) {
  this.sec = null;
  this.tope = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.tope !== undefined) {
      this.tope = args.tope;
    }
  }
};
MasterClientService_waitForFlush_result.prototype = {};
MasterClientService_waitForFlush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tope = new client_ttypes.ThriftTableOperationException();
        this.tope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_waitForFlush_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_waitForFlush_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.tope) {
    output.writeFieldBegin('tope', Thrift.Type.STRUCT, 2);
    this.tope.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_setTableProperty_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.tableName = null;
  this.property = null;
  this.value = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.property !== undefined) {
      this.property = args.property;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
MasterClientService_setTableProperty_args.prototype = {};
MasterClientService_setTableProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_setTableProperty_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_setTableProperty_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.property) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 3);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  if (this.value) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_setTableProperty_result = function(args) {
  this.sec = null;
  this.tope = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.tope !== undefined) {
      this.tope = args.tope;
    }
  }
};
MasterClientService_setTableProperty_result.prototype = {};
MasterClientService_setTableProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tope = new client_ttypes.ThriftTableOperationException();
        this.tope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_setTableProperty_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_setTableProperty_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.tope) {
    output.writeFieldBegin('tope', Thrift.Type.STRUCT, 2);
    this.tope.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_removeTableProperty_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.tableName = null;
  this.property = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.property !== undefined) {
      this.property = args.property;
    }
  }
};
MasterClientService_removeTableProperty_args.prototype = {};
MasterClientService_removeTableProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_removeTableProperty_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_removeTableProperty_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.property) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 3);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_removeTableProperty_result = function(args) {
  this.sec = null;
  this.tope = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.tope !== undefined) {
      this.tope = args.tope;
    }
  }
};
MasterClientService_removeTableProperty_result.prototype = {};
MasterClientService_removeTableProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tope = new client_ttypes.ThriftTableOperationException();
        this.tope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_removeTableProperty_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_removeTableProperty_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.tope) {
    output.writeFieldBegin('tope', Thrift.Type.STRUCT, 2);
    this.tope.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_setMasterGoalState_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.state = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
MasterClientService_setMasterGoalState_args.prototype = {};
MasterClientService_setMasterGoalState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_setMasterGoalState_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_setMasterGoalState_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.state) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_setMasterGoalState_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
MasterClientService_setMasterGoalState_result.prototype = {};
MasterClientService_setMasterGoalState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_setMasterGoalState_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_setMasterGoalState_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_shutdown_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.stopTabletServers = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.stopTabletServers !== undefined) {
      this.stopTabletServers = args.stopTabletServers;
    }
  }
};
MasterClientService_shutdown_args.prototype = {};
MasterClientService_shutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.stopTabletServers = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_shutdown_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_shutdown_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.stopTabletServers) {
    output.writeFieldBegin('stopTabletServers', Thrift.Type.BOOL, 2);
    output.writeBool(this.stopTabletServers);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_shutdown_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
MasterClientService_shutdown_result.prototype = {};
MasterClientService_shutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_shutdown_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_shutdown_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_shutdownTabletServer_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.tabletServer = null;
  this.force = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.tabletServer !== undefined) {
      this.tabletServer = args.tabletServer;
    }
    if (args.force !== undefined) {
      this.force = args.force;
    }
  }
};
MasterClientService_shutdownTabletServer_args.prototype = {};
MasterClientService_shutdownTabletServer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tabletServer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.force = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_shutdownTabletServer_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_shutdownTabletServer_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.tabletServer) {
    output.writeFieldBegin('tabletServer', Thrift.Type.STRING, 2);
    output.writeString(this.tabletServer);
    output.writeFieldEnd();
  }
  if (this.force) {
    output.writeFieldBegin('force', Thrift.Type.BOOL, 4);
    output.writeBool(this.force);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_shutdownTabletServer_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
MasterClientService_shutdownTabletServer_result.prototype = {};
MasterClientService_shutdownTabletServer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_shutdownTabletServer_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_shutdownTabletServer_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_setSystemProperty_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.property = null;
  this.value = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.property !== undefined) {
      this.property = args.property;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
MasterClientService_setSystemProperty_args.prototype = {};
MasterClientService_setSystemProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_setSystemProperty_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_setSystemProperty_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.property) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 2);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  if (this.value) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_setSystemProperty_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
MasterClientService_setSystemProperty_result.prototype = {};
MasterClientService_setSystemProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_setSystemProperty_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_setSystemProperty_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_removeSystemProperty_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.property = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.property !== undefined) {
      this.property = args.property;
    }
  }
};
MasterClientService_removeSystemProperty_args.prototype = {};
MasterClientService_removeSystemProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_removeSystemProperty_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_removeSystemProperty_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.property) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 2);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_removeSystemProperty_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
MasterClientService_removeSystemProperty_result.prototype = {};
MasterClientService_removeSystemProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_removeSystemProperty_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_removeSystemProperty_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_getMasterStats_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
MasterClientService_getMasterStats_args.prototype = {};
MasterClientService_getMasterStats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_getMasterStats_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_getMasterStats_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_getMasterStats_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
MasterClientService_getMasterStats_result.prototype = {};
MasterClientService_getMasterStats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MasterMonitorInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_getMasterStats_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_getMasterStats_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_reportSplitExtent_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.serverName = null;
  this.split = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.serverName !== undefined) {
      this.serverName = args.serverName;
    }
    if (args.split !== undefined) {
      this.split = args.split;
    }
  }
};
MasterClientService_reportSplitExtent_args.prototype = {};
MasterClientService_reportSplitExtent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serverName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.split = new ttypes.TabletSplit();
        this.split.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_reportSplitExtent_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_reportSplitExtent_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.serverName) {
    output.writeFieldBegin('serverName', Thrift.Type.STRING, 2);
    output.writeString(this.serverName);
    output.writeFieldEnd();
  }
  if (this.split) {
    output.writeFieldBegin('split', Thrift.Type.STRUCT, 3);
    this.split.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_reportSplitExtent_result = function(args) {
};
MasterClientService_reportSplitExtent_result.prototype = {};
MasterClientService_reportSplitExtent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_reportSplitExtent_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_reportSplitExtent_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_reportTabletStatus_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.serverName = null;
  this.status = null;
  this.tablet = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.serverName !== undefined) {
      this.serverName = args.serverName;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.tablet !== undefined) {
      this.tablet = args.tablet;
    }
  }
};
MasterClientService_reportTabletStatus_args.prototype = {};
MasterClientService_reportTabletStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serverName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tablet = new data_ttypes.TKeyExtent();
        this.tablet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_reportTabletStatus_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_reportTabletStatus_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.serverName) {
    output.writeFieldBegin('serverName', Thrift.Type.STRING, 2);
    output.writeString(this.serverName);
    output.writeFieldEnd();
  }
  if (this.status) {
    output.writeFieldBegin('status', Thrift.Type.I32, 3);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.tablet) {
    output.writeFieldBegin('tablet', Thrift.Type.STRUCT, 4);
    this.tablet.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_reportTabletStatus_result = function(args) {
};
MasterClientService_reportTabletStatus_result.prototype = {};
MasterClientService_reportTabletStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_reportTabletStatus_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_reportTabletStatus_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_beginTableOperation_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
MasterClientService_beginTableOperation_args.prototype = {};
MasterClientService_beginTableOperation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_beginTableOperation_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_beginTableOperation_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_beginTableOperation_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
MasterClientService_beginTableOperation_result.prototype = {};
MasterClientService_beginTableOperation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_beginTableOperation_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_beginTableOperation_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_executeTableOperation_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.opid = null;
  this.op = null;
  this.arguments = null;
  this.options = null;
  this.autoClean = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.opid !== undefined) {
      this.opid = args.opid;
    }
    if (args.op !== undefined) {
      this.op = args.op;
    }
    if (args.arguments !== undefined) {
      this.arguments = args.arguments;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
    if (args.autoClean !== undefined) {
      this.autoClean = args.autoClean;
    }
  }
};
MasterClientService_executeTableOperation_args.prototype = {};
MasterClientService_executeTableOperation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.opid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.op = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size94 = 0;
        var _rtmp398;
        this.arguments = [];
        var _etype97 = 0;
        _rtmp398 = input.readListBegin();
        _etype97 = _rtmp398.etype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          var elem100 = null;
          elem100 = input.readString();
          this.arguments.push(elem100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size101 = 0;
        var _rtmp3105;
        this.options = {};
        var _ktype102 = 0;
        var _vtype103 = 0;
        _rtmp3105 = input.readMapBegin();
        _ktype102 = _rtmp3105.ktype;
        _vtype103 = _rtmp3105.vtype;
        _size101 = _rtmp3105.size;
        for (var _i106 = 0; _i106 < _size101; ++_i106)
        {
          var key107 = null;
          var val108 = null;
          key107 = input.readString();
          val108 = input.readString();
          this.options[key107] = val108;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.autoClean = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_executeTableOperation_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_executeTableOperation_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 7);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.opid) {
    output.writeFieldBegin('opid', Thrift.Type.I64, 2);
    output.writeI64(this.opid);
    output.writeFieldEnd();
  }
  if (this.op) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.arguments) {
    output.writeFieldBegin('arguments', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.arguments.length);
    for (var iter109 in this.arguments)
    {
      if (this.arguments.hasOwnProperty(iter109))
      {
        iter109 = this.arguments[iter109];
        output.writeString(iter109);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.options) {
    output.writeFieldBegin('options', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.options));
    for (var kiter110 in this.options)
    {
      if (this.options.hasOwnProperty(kiter110))
      {
        var viter111 = this.options[kiter110];
        output.writeString(kiter110);
        output.writeString(viter111);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.autoClean) {
    output.writeFieldBegin('autoClean', Thrift.Type.BOOL, 6);
    output.writeBool(this.autoClean);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_executeTableOperation_result = function(args) {
  this.sec = null;
  this.tope = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.tope !== undefined) {
      this.tope = args.tope;
    }
  }
};
MasterClientService_executeTableOperation_result.prototype = {};
MasterClientService_executeTableOperation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tope = new client_ttypes.ThriftTableOperationException();
        this.tope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_executeTableOperation_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_executeTableOperation_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.tope) {
    output.writeFieldBegin('tope', Thrift.Type.STRUCT, 2);
    this.tope.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_waitForTableOperation_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.opid = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.opid !== undefined) {
      this.opid = args.opid;
    }
  }
};
MasterClientService_waitForTableOperation_args.prototype = {};
MasterClientService_waitForTableOperation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.opid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_waitForTableOperation_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_waitForTableOperation_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.opid) {
    output.writeFieldBegin('opid', Thrift.Type.I64, 2);
    output.writeI64(this.opid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_waitForTableOperation_result = function(args) {
  this.success = null;
  this.sec = null;
  this.tope = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.tope !== undefined) {
      this.tope = args.tope;
    }
  }
};
MasterClientService_waitForTableOperation_result.prototype = {};
MasterClientService_waitForTableOperation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tope = new client_ttypes.ThriftTableOperationException();
        this.tope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_waitForTableOperation_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_waitForTableOperation_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.tope) {
    output.writeFieldBegin('tope', Thrift.Type.STRUCT, 2);
    this.tope.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_finishTableOperation_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.opid = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.opid !== undefined) {
      this.opid = args.opid;
    }
  }
};
MasterClientService_finishTableOperation_args.prototype = {};
MasterClientService_finishTableOperation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.opid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_finishTableOperation_args.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_finishTableOperation_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.opid) {
    output.writeFieldBegin('opid', Thrift.Type.I64, 2);
    output.writeI64(this.opid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientService_finishTableOperation_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
MasterClientService_finishTableOperation_result.prototype = {};
MasterClientService_finishTableOperation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MasterClientService_finishTableOperation_result.prototype.write = function(output) {
  output.writeStructBegin('MasterClientService_finishTableOperation_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MasterClientServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
MasterClientServiceClient.prototype = {};
MasterClientServiceClient.prototype.initiateFlush = function(tinfo, credentials, tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_initiateFlush(tinfo, credentials, tableName);
};

MasterClientServiceClient.prototype.send_initiateFlush = function(tinfo, credentials, tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('initiateFlush', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_initiateFlush_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_initiateFlush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_initiateFlush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.tope) {
    return callback(result.tope);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('initiateFlush failed: unknown result');
};
MasterClientServiceClient.prototype.waitForFlush = function(tinfo, credentials, tableName, startRow, endRow, flushID, maxLoops, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_waitForFlush(tinfo, credentials, tableName, startRow, endRow, flushID, maxLoops);
};

MasterClientServiceClient.prototype.send_waitForFlush = function(tinfo, credentials, tableName, startRow, endRow, flushID, maxLoops) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('waitForFlush', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_waitForFlush_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.tableName = tableName;
  args.startRow = startRow;
  args.endRow = endRow;
  args.flushID = flushID;
  args.maxLoops = maxLoops;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_waitForFlush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_waitForFlush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.tope) {
    return callback(result.tope);
  }
  callback(null)
};
MasterClientServiceClient.prototype.setTableProperty = function(tinfo, credentials, tableName, property, value, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setTableProperty(tinfo, credentials, tableName, property, value);
};

MasterClientServiceClient.prototype.send_setTableProperty = function(tinfo, credentials, tableName, property, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setTableProperty', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_setTableProperty_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.tableName = tableName;
  args.property = property;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_setTableProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_setTableProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.tope) {
    return callback(result.tope);
  }
  callback(null)
};
MasterClientServiceClient.prototype.removeTableProperty = function(tinfo, credentials, tableName, property, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_removeTableProperty(tinfo, credentials, tableName, property);
};

MasterClientServiceClient.prototype.send_removeTableProperty = function(tinfo, credentials, tableName, property) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeTableProperty', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_removeTableProperty_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.tableName = tableName;
  args.property = property;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_removeTableProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_removeTableProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.tope) {
    return callback(result.tope);
  }
  callback(null)
};
MasterClientServiceClient.prototype.setMasterGoalState = function(tinfo, credentials, state, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setMasterGoalState(tinfo, credentials, state);
};

MasterClientServiceClient.prototype.send_setMasterGoalState = function(tinfo, credentials, state) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setMasterGoalState', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_setMasterGoalState_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.state = state;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_setMasterGoalState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_setMasterGoalState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
MasterClientServiceClient.prototype.shutdown = function(tinfo, credentials, stopTabletServers, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_shutdown(tinfo, credentials, stopTabletServers);
};

MasterClientServiceClient.prototype.send_shutdown = function(tinfo, credentials, stopTabletServers) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('shutdown', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_shutdown_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.stopTabletServers = stopTabletServers;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_shutdown = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_shutdown_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
MasterClientServiceClient.prototype.shutdownTabletServer = function(tinfo, credentials, tabletServer, force, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_shutdownTabletServer(tinfo, credentials, tabletServer, force);
};

MasterClientServiceClient.prototype.send_shutdownTabletServer = function(tinfo, credentials, tabletServer, force) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('shutdownTabletServer', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_shutdownTabletServer_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.tabletServer = tabletServer;
  args.force = force;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_shutdownTabletServer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_shutdownTabletServer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
MasterClientServiceClient.prototype.setSystemProperty = function(tinfo, credentials, property, value, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setSystemProperty(tinfo, credentials, property, value);
};

MasterClientServiceClient.prototype.send_setSystemProperty = function(tinfo, credentials, property, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setSystemProperty', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_setSystemProperty_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.property = property;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_setSystemProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_setSystemProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
MasterClientServiceClient.prototype.removeSystemProperty = function(tinfo, credentials, property, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_removeSystemProperty(tinfo, credentials, property);
};

MasterClientServiceClient.prototype.send_removeSystemProperty = function(tinfo, credentials, property) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeSystemProperty', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_removeSystemProperty_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.property = property;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_removeSystemProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_removeSystemProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
MasterClientServiceClient.prototype.getMasterStats = function(tinfo, credentials, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getMasterStats(tinfo, credentials);
};

MasterClientServiceClient.prototype.send_getMasterStats = function(tinfo, credentials) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMasterStats', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_getMasterStats_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_getMasterStats = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_getMasterStats_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMasterStats failed: unknown result');
};
MasterClientServiceClient.prototype.reportSplitExtent = function(tinfo, credentials, serverName, split, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_reportSplitExtent(tinfo, credentials, serverName, split);
};

MasterClientServiceClient.prototype.send_reportSplitExtent = function(tinfo, credentials, serverName, split) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reportSplitExtent', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_reportSplitExtent_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.serverName = serverName;
  args.split = split;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
MasterClientServiceClient.prototype.reportTabletStatus = function(tinfo, credentials, serverName, status, tablet, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_reportTabletStatus(tinfo, credentials, serverName, status, tablet);
};

MasterClientServiceClient.prototype.send_reportTabletStatus = function(tinfo, credentials, serverName, status, tablet) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reportTabletStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_reportTabletStatus_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.serverName = serverName;
  args.status = status;
  args.tablet = tablet;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
MasterClientServiceClient.prototype.beginTableOperation = function(tinfo, credentials, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_beginTableOperation(tinfo, credentials);
};

MasterClientServiceClient.prototype.send_beginTableOperation = function(tinfo, credentials) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('beginTableOperation', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_beginTableOperation_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_beginTableOperation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_beginTableOperation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('beginTableOperation failed: unknown result');
};
MasterClientServiceClient.prototype.executeTableOperation = function(tinfo, credentials, opid, op, arguments, options, autoClean, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_executeTableOperation(tinfo, credentials, opid, op, arguments, options, autoClean);
};

MasterClientServiceClient.prototype.send_executeTableOperation = function(tinfo, credentials, opid, op, arguments, options, autoClean) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('executeTableOperation', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_executeTableOperation_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.opid = opid;
  args.op = op;
  args.arguments = arguments;
  args.options = options;
  args.autoClean = autoClean;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_executeTableOperation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_executeTableOperation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.tope) {
    return callback(result.tope);
  }
  callback(null)
};
MasterClientServiceClient.prototype.waitForTableOperation = function(tinfo, credentials, opid, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_waitForTableOperation(tinfo, credentials, opid);
};

MasterClientServiceClient.prototype.send_waitForTableOperation = function(tinfo, credentials, opid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('waitForTableOperation', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_waitForTableOperation_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.opid = opid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_waitForTableOperation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_waitForTableOperation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.tope) {
    return callback(result.tope);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('waitForTableOperation failed: unknown result');
};
MasterClientServiceClient.prototype.finishTableOperation = function(tinfo, credentials, opid, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_finishTableOperation(tinfo, credentials, opid);
};

MasterClientServiceClient.prototype.send_finishTableOperation = function(tinfo, credentials, opid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('finishTableOperation', Thrift.MessageType.CALL, this.seqid);
  var args = new MasterClientService_finishTableOperation_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.opid = opid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MasterClientServiceClient.prototype.recv_finishTableOperation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MasterClientService_finishTableOperation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
var MasterClientServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
MasterClientServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

MasterClientServiceProcessor.prototype.process_initiateFlush = function(seqid, input, output) {
  var args = new MasterClientService_initiateFlush_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_initiateFlush_result();
  this._handler.initiateFlush(args.tinfo, args.credentials, args.tableName, function (success) {
    result.success = success;
    output.writeMessageBegin("initiateFlush", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_waitForFlush = function(seqid, input, output) {
  var args = new MasterClientService_waitForFlush_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_waitForFlush_result();
  this._handler.waitForFlush(args.tinfo, args.credentials, args.tableName, args.startRow, args.endRow, args.flushID, args.maxLoops, function (success) {
    result.success = success;
    output.writeMessageBegin("waitForFlush", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_setTableProperty = function(seqid, input, output) {
  var args = new MasterClientService_setTableProperty_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_setTableProperty_result();
  this._handler.setTableProperty(args.tinfo, args.credentials, args.tableName, args.property, args.value, function (success) {
    result.success = success;
    output.writeMessageBegin("setTableProperty", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_removeTableProperty = function(seqid, input, output) {
  var args = new MasterClientService_removeTableProperty_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_removeTableProperty_result();
  this._handler.removeTableProperty(args.tinfo, args.credentials, args.tableName, args.property, function (success) {
    result.success = success;
    output.writeMessageBegin("removeTableProperty", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_setMasterGoalState = function(seqid, input, output) {
  var args = new MasterClientService_setMasterGoalState_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_setMasterGoalState_result();
  this._handler.setMasterGoalState(args.tinfo, args.credentials, args.state, function (success) {
    result.success = success;
    output.writeMessageBegin("setMasterGoalState", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_shutdown = function(seqid, input, output) {
  var args = new MasterClientService_shutdown_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_shutdown_result();
  this._handler.shutdown(args.tinfo, args.credentials, args.stopTabletServers, function (success) {
    result.success = success;
    output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_shutdownTabletServer = function(seqid, input, output) {
  var args = new MasterClientService_shutdownTabletServer_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_shutdownTabletServer_result();
  this._handler.shutdownTabletServer(args.tinfo, args.credentials, args.tabletServer, args.force, function (success) {
    result.success = success;
    output.writeMessageBegin("shutdownTabletServer", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_setSystemProperty = function(seqid, input, output) {
  var args = new MasterClientService_setSystemProperty_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_setSystemProperty_result();
  this._handler.setSystemProperty(args.tinfo, args.credentials, args.property, args.value, function (success) {
    result.success = success;
    output.writeMessageBegin("setSystemProperty", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_removeSystemProperty = function(seqid, input, output) {
  var args = new MasterClientService_removeSystemProperty_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_removeSystemProperty_result();
  this._handler.removeSystemProperty(args.tinfo, args.credentials, args.property, function (success) {
    result.success = success;
    output.writeMessageBegin("removeSystemProperty", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_getMasterStats = function(seqid, input, output) {
  var args = new MasterClientService_getMasterStats_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_getMasterStats_result();
  this._handler.getMasterStats(args.tinfo, args.credentials, function (success) {
    result.success = success;
    output.writeMessageBegin("getMasterStats", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_reportSplitExtent = function(seqid, input, output) {
  var args = new MasterClientService_reportSplitExtent_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.reportSplitExtent(args.tinfo, args.credentials, args.serverName, args.split)
}

MasterClientServiceProcessor.prototype.process_reportTabletStatus = function(seqid, input, output) {
  var args = new MasterClientService_reportTabletStatus_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.reportTabletStatus(args.tinfo, args.credentials, args.serverName, args.status, args.tablet)
}

MasterClientServiceProcessor.prototype.process_beginTableOperation = function(seqid, input, output) {
  var args = new MasterClientService_beginTableOperation_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_beginTableOperation_result();
  this._handler.beginTableOperation(args.tinfo, args.credentials, function (success) {
    result.success = success;
    output.writeMessageBegin("beginTableOperation", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_executeTableOperation = function(seqid, input, output) {
  var args = new MasterClientService_executeTableOperation_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_executeTableOperation_result();
  this._handler.executeTableOperation(args.tinfo, args.credentials, args.opid, args.op, args.arguments, args.options, args.autoClean, function (success) {
    result.success = success;
    output.writeMessageBegin("executeTableOperation", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_waitForTableOperation = function(seqid, input, output) {
  var args = new MasterClientService_waitForTableOperation_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_waitForTableOperation_result();
  this._handler.waitForTableOperation(args.tinfo, args.credentials, args.opid, function (success) {
    result.success = success;
    output.writeMessageBegin("waitForTableOperation", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MasterClientServiceProcessor.prototype.process_finishTableOperation = function(seqid, input, output) {
  var args = new MasterClientService_finishTableOperation_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MasterClientService_finishTableOperation_result();
  this._handler.finishTableOperation(args.tinfo, args.credentials, args.opid, function (success) {
    result.success = success;
    output.writeMessageBegin("finishTableOperation", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

