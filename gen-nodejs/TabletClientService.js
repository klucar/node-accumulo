//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var data_ttypes = require('./data_types')
var security_ttypes = require('./security_types')
var client_ttypes = require('./client_types')
var master_ttypes = require('./master_types')
var cloudtrace_ttypes = require('./cloudtrace_types')


var ClientService = require('./ClientService')
var ClientServiceClient = ClientService.Client
var ttypes = require('./tabletserver_types');
//HELPER FUNCTIONS AND STRUCTURES

var TabletClientService_startScan_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.extent = null;
  this.range = null;
  this.columns = null;
  this.batchSize = null;
  this.ssiList = null;
  this.ssio = null;
  this.authorizations = null;
  this.waitForWrites = null;
  this.isolated = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.extent !== undefined) {
      this.extent = args.extent;
    }
    if (args.range !== undefined) {
      this.range = args.range;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.batchSize !== undefined) {
      this.batchSize = args.batchSize;
    }
    if (args.ssiList !== undefined) {
      this.ssiList = args.ssiList;
    }
    if (args.ssio !== undefined) {
      this.ssio = args.ssio;
    }
    if (args.authorizations !== undefined) {
      this.authorizations = args.authorizations;
    }
    if (args.waitForWrites !== undefined) {
      this.waitForWrites = args.waitForWrites;
    }
    if (args.isolated !== undefined) {
      this.isolated = args.isolated;
    }
  }
};
TabletClientService_startScan_args.prototype = {};
TabletClientService_startScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.extent = new data_ttypes.TKeyExtent();
        this.extent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new data_ttypes.TRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.columns = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = new data_ttypes.TColumn();
          elem58.read(input);
          this.columns.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.batchSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size59 = 0;
        var _rtmp363;
        this.ssiList = [];
        var _etype62 = 0;
        _rtmp363 = input.readListBegin();
        _etype62 = _rtmp363.etype;
        _size59 = _rtmp363.size;
        for (var _i64 = 0; _i64 < _size59; ++_i64)
        {
          var elem65 = null;
          elem65 = new data_ttypes.IterInfo();
          elem65.read(input);
          this.ssiList.push(elem65);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size66 = 0;
        var _rtmp370;
        this.ssio = {};
        var _ktype67 = 0;
        var _vtype68 = 0;
        _rtmp370 = input.readMapBegin();
        _ktype67 = _rtmp370.ktype;
        _vtype68 = _rtmp370.vtype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var key72 = null;
          var val73 = null;
          key72 = input.readString();
          var _size74 = 0;
          var _rtmp378;
          val73 = {};
          var _ktype75 = 0;
          var _vtype76 = 0;
          _rtmp378 = input.readMapBegin();
          _ktype75 = _rtmp378.ktype;
          _vtype76 = _rtmp378.vtype;
          _size74 = _rtmp378.size;
          for (var _i79 = 0; _i79 < _size74; ++_i79)
          {
            var key80 = null;
            var val81 = null;
            key80 = input.readString();
            val81 = input.readString();
            val73[key80] = val81;
          }
          input.readMapEnd();
          this.ssio[key72] = val73;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size82 = 0;
        var _rtmp386;
        this.authorizations = [];
        var _etype85 = 0;
        _rtmp386 = input.readListBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = input.readString();
          this.authorizations.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.waitForWrites = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.isolated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_startScan_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_startScan_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 11);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.extent) {
    output.writeFieldBegin('extent', Thrift.Type.STRUCT, 2);
    this.extent.write(output);
    output.writeFieldEnd();
  }
  if (this.range) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 3);
    this.range.write(output);
    output.writeFieldEnd();
  }
  if (this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter89 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter89))
      {
        iter89 = this.columns[iter89];
        iter89.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.batchSize) {
    output.writeFieldBegin('batchSize', Thrift.Type.I32, 5);
    output.writeI32(this.batchSize);
    output.writeFieldEnd();
  }
  if (this.ssiList) {
    output.writeFieldBegin('ssiList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.ssiList.length);
    for (var iter90 in this.ssiList)
    {
      if (this.ssiList.hasOwnProperty(iter90))
      {
        iter90 = this.ssiList[iter90];
        iter90.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ssio) {
    output.writeFieldBegin('ssio', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.ssio));
    for (var kiter91 in this.ssio)
    {
      if (this.ssio.hasOwnProperty(kiter91))
      {
        var viter92 = this.ssio[kiter91];
        output.writeString(kiter91);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(viter92));
        for (var kiter93 in viter92)
        {
          if (viter92.hasOwnProperty(kiter93))
          {
            var viter94 = viter92[kiter93];
            output.writeString(kiter93);
            output.writeString(viter94);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.authorizations) {
    output.writeFieldBegin('authorizations', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.authorizations.length);
    for (var iter95 in this.authorizations)
    {
      if (this.authorizations.hasOwnProperty(iter95))
      {
        iter95 = this.authorizations[iter95];
        output.writeString(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.waitForWrites) {
    output.writeFieldBegin('waitForWrites', Thrift.Type.BOOL, 9);
    output.writeBool(this.waitForWrites);
    output.writeFieldEnd();
  }
  if (this.isolated) {
    output.writeFieldBegin('isolated', Thrift.Type.BOOL, 10);
    output.writeBool(this.isolated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_startScan_result = function(args) {
  this.success = null;
  this.sec = null;
  this.nste = null;
  this.tmfe = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.nste !== undefined) {
      this.nste = args.nste;
    }
    if (args.tmfe !== undefined) {
      this.tmfe = args.tmfe;
    }
  }
};
TabletClientService_startScan_result.prototype = {};
TabletClientService_startScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new data_ttypes.InitialScan();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nste = new ttypes.NotServingTabletException();
        this.nste.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tmfe = new ttypes.TooManyFilesException();
        this.tmfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_startScan_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_startScan_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.nste) {
    output.writeFieldBegin('nste', Thrift.Type.STRUCT, 2);
    this.nste.write(output);
    output.writeFieldEnd();
  }
  if (this.tmfe) {
    output.writeFieldBegin('tmfe', Thrift.Type.STRUCT, 3);
    this.tmfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_continueScan_args = function(args) {
  this.tinfo = null;
  this.scanID = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.scanID !== undefined) {
      this.scanID = args.scanID;
    }
  }
};
TabletClientService_continueScan_args.prototype = {};
TabletClientService_continueScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_continueScan_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_continueScan_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.scanID) {
    output.writeFieldBegin('scanID', Thrift.Type.I64, 1);
    output.writeI64(this.scanID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_continueScan_result = function(args) {
  this.success = null;
  this.nssi = null;
  this.nste = null;
  this.tmfe = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.nssi !== undefined) {
      this.nssi = args.nssi;
    }
    if (args.nste !== undefined) {
      this.nste = args.nste;
    }
    if (args.tmfe !== undefined) {
      this.tmfe = args.tmfe;
    }
  }
};
TabletClientService_continueScan_result.prototype = {};
TabletClientService_continueScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new data_ttypes.ScanResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nssi = new ttypes.NoSuchScanIDException();
        this.nssi.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nste = new ttypes.NotServingTabletException();
        this.nste.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tmfe = new ttypes.TooManyFilesException();
        this.tmfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_continueScan_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_continueScan_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nssi) {
    output.writeFieldBegin('nssi', Thrift.Type.STRUCT, 1);
    this.nssi.write(output);
    output.writeFieldEnd();
  }
  if (this.nste) {
    output.writeFieldBegin('nste', Thrift.Type.STRUCT, 2);
    this.nste.write(output);
    output.writeFieldEnd();
  }
  if (this.tmfe) {
    output.writeFieldBegin('tmfe', Thrift.Type.STRUCT, 3);
    this.tmfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_closeScan_args = function(args) {
  this.tinfo = null;
  this.scanID = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.scanID !== undefined) {
      this.scanID = args.scanID;
    }
  }
};
TabletClientService_closeScan_args.prototype = {};
TabletClientService_closeScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_closeScan_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_closeScan_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.scanID) {
    output.writeFieldBegin('scanID', Thrift.Type.I64, 1);
    output.writeI64(this.scanID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_closeScan_result = function(args) {
};
TabletClientService_closeScan_result.prototype = {};
TabletClientService_closeScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_closeScan_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_closeScan_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_startMultiScan_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.batch = null;
  this.columns = null;
  this.ssiList = null;
  this.ssio = null;
  this.authorizations = null;
  this.waitForWrites = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.batch !== undefined) {
      this.batch = args.batch;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.ssiList !== undefined) {
      this.ssiList = args.ssiList;
    }
    if (args.ssio !== undefined) {
      this.ssio = args.ssio;
    }
    if (args.authorizations !== undefined) {
      this.authorizations = args.authorizations;
    }
    if (args.waitForWrites !== undefined) {
      this.waitForWrites = args.waitForWrites;
    }
  }
};
TabletClientService_startMultiScan_args.prototype = {};
TabletClientService_startMultiScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size96 = 0;
        var _rtmp3100;
        this.batch = {};
        var _ktype97 = 0;
        var _vtype98 = 0;
        _rtmp3100 = input.readMapBegin();
        _ktype97 = _rtmp3100.ktype;
        _vtype98 = _rtmp3100.vtype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var key102 = null;
          var val103 = null;
          key102 = new data_ttypes.TKeyExtent();
          key102.read(input);
          var _size104 = 0;
          var _rtmp3108;
          val103 = [];
          var _etype107 = 0;
          _rtmp3108 = input.readListBegin();
          _etype107 = _rtmp3108.etype;
          _size104 = _rtmp3108.size;
          for (var _i109 = 0; _i109 < _size104; ++_i109)
          {
            var elem110 = null;
            elem110 = new data_ttypes.TRange();
            elem110.read(input);
            val103.push(elem110);
          }
          input.readListEnd();
          this.batch[key102] = val103;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size111 = 0;
        var _rtmp3115;
        this.columns = [];
        var _etype114 = 0;
        _rtmp3115 = input.readListBegin();
        _etype114 = _rtmp3115.etype;
        _size111 = _rtmp3115.size;
        for (var _i116 = 0; _i116 < _size111; ++_i116)
        {
          var elem117 = null;
          elem117 = new data_ttypes.TColumn();
          elem117.read(input);
          this.columns.push(elem117);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size118 = 0;
        var _rtmp3122;
        this.ssiList = [];
        var _etype121 = 0;
        _rtmp3122 = input.readListBegin();
        _etype121 = _rtmp3122.etype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var elem124 = null;
          elem124 = new data_ttypes.IterInfo();
          elem124.read(input);
          this.ssiList.push(elem124);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size125 = 0;
        var _rtmp3129;
        this.ssio = {};
        var _ktype126 = 0;
        var _vtype127 = 0;
        _rtmp3129 = input.readMapBegin();
        _ktype126 = _rtmp3129.ktype;
        _vtype127 = _rtmp3129.vtype;
        _size125 = _rtmp3129.size;
        for (var _i130 = 0; _i130 < _size125; ++_i130)
        {
          var key131 = null;
          var val132 = null;
          key131 = input.readString();
          var _size133 = 0;
          var _rtmp3137;
          val132 = {};
          var _ktype134 = 0;
          var _vtype135 = 0;
          _rtmp3137 = input.readMapBegin();
          _ktype134 = _rtmp3137.ktype;
          _vtype135 = _rtmp3137.vtype;
          _size133 = _rtmp3137.size;
          for (var _i138 = 0; _i138 < _size133; ++_i138)
          {
            var key139 = null;
            var val140 = null;
            key139 = input.readString();
            val140 = input.readString();
            val132[key139] = val140;
          }
          input.readMapEnd();
          this.ssio[key131] = val132;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size141 = 0;
        var _rtmp3145;
        this.authorizations = [];
        var _etype144 = 0;
        _rtmp3145 = input.readListBegin();
        _etype144 = _rtmp3145.etype;
        _size141 = _rtmp3145.size;
        for (var _i146 = 0; _i146 < _size141; ++_i146)
        {
          var elem147 = null;
          elem147 = input.readString();
          this.authorizations.push(elem147);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.waitForWrites = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_startMultiScan_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_startMultiScan_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 8);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.batch) {
    output.writeFieldBegin('batch', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.LIST, Thrift.objectLength(this.batch));
    for (var kiter148 in this.batch)
    {
      if (this.batch.hasOwnProperty(kiter148))
      {
        var viter149 = this.batch[kiter148];
        kiter148.write(output);
        output.writeListBegin(Thrift.Type.STRUCT, viter149.length);
        for (var iter150 in viter149)
        {
          if (viter149.hasOwnProperty(iter150))
          {
            iter150 = viter149[iter150];
            iter150.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter151 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter151))
      {
        iter151 = this.columns[iter151];
        iter151.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ssiList) {
    output.writeFieldBegin('ssiList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.ssiList.length);
    for (var iter152 in this.ssiList)
    {
      if (this.ssiList.hasOwnProperty(iter152))
      {
        iter152 = this.ssiList[iter152];
        iter152.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ssio) {
    output.writeFieldBegin('ssio', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.ssio));
    for (var kiter153 in this.ssio)
    {
      if (this.ssio.hasOwnProperty(kiter153))
      {
        var viter154 = this.ssio[kiter153];
        output.writeString(kiter153);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(viter154));
        for (var kiter155 in viter154)
        {
          if (viter154.hasOwnProperty(kiter155))
          {
            var viter156 = viter154[kiter155];
            output.writeString(kiter155);
            output.writeString(viter156);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.authorizations) {
    output.writeFieldBegin('authorizations', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.authorizations.length);
    for (var iter157 in this.authorizations)
    {
      if (this.authorizations.hasOwnProperty(iter157))
      {
        iter157 = this.authorizations[iter157];
        output.writeString(iter157);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.waitForWrites) {
    output.writeFieldBegin('waitForWrites', Thrift.Type.BOOL, 7);
    output.writeBool(this.waitForWrites);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_startMultiScan_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
TabletClientService_startMultiScan_result.prototype = {};
TabletClientService_startMultiScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new data_ttypes.InitialMultiScan();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_startMultiScan_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_startMultiScan_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_continueMultiScan_args = function(args) {
  this.tinfo = null;
  this.scanID = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.scanID !== undefined) {
      this.scanID = args.scanID;
    }
  }
};
TabletClientService_continueMultiScan_args.prototype = {};
TabletClientService_continueMultiScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_continueMultiScan_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_continueMultiScan_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.scanID) {
    output.writeFieldBegin('scanID', Thrift.Type.I64, 1);
    output.writeI64(this.scanID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_continueMultiScan_result = function(args) {
  this.success = null;
  this.nssi = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.nssi !== undefined) {
      this.nssi = args.nssi;
    }
  }
};
TabletClientService_continueMultiScan_result.prototype = {};
TabletClientService_continueMultiScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new data_ttypes.MultiScanResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nssi = new ttypes.NoSuchScanIDException();
        this.nssi.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_continueMultiScan_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_continueMultiScan_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nssi) {
    output.writeFieldBegin('nssi', Thrift.Type.STRUCT, 1);
    this.nssi.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_closeMultiScan_args = function(args) {
  this.tinfo = null;
  this.scanID = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.scanID !== undefined) {
      this.scanID = args.scanID;
    }
  }
};
TabletClientService_closeMultiScan_args.prototype = {};
TabletClientService_closeMultiScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_closeMultiScan_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_closeMultiScan_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.scanID) {
    output.writeFieldBegin('scanID', Thrift.Type.I64, 1);
    output.writeI64(this.scanID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_closeMultiScan_result = function(args) {
  this.nssi = null;
  if (args) {
    if (args.nssi !== undefined) {
      this.nssi = args.nssi;
    }
  }
};
TabletClientService_closeMultiScan_result.prototype = {};
TabletClientService_closeMultiScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nssi = new ttypes.NoSuchScanIDException();
        this.nssi.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_closeMultiScan_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_closeMultiScan_result');
  if (this.nssi) {
    output.writeFieldBegin('nssi', Thrift.Type.STRUCT, 1);
    this.nssi.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_startUpdate_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
TabletClientService_startUpdate_args.prototype = {};
TabletClientService_startUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_startUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_startUpdate_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_startUpdate_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
TabletClientService_startUpdate_result.prototype = {};
TabletClientService_startUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_startUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_startUpdate_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_applyUpdates_args = function(args) {
  this.tinfo = null;
  this.updateID = null;
  this.keyExtent = null;
  this.mutations = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.updateID !== undefined) {
      this.updateID = args.updateID;
    }
    if (args.keyExtent !== undefined) {
      this.keyExtent = args.keyExtent;
    }
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
  }
};
TabletClientService_applyUpdates_args.prototype = {};
TabletClientService_applyUpdates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.updateID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyExtent = new data_ttypes.TKeyExtent();
        this.keyExtent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size158 = 0;
        var _rtmp3162;
        this.mutations = [];
        var _etype161 = 0;
        _rtmp3162 = input.readListBegin();
        _etype161 = _rtmp3162.etype;
        _size158 = _rtmp3162.size;
        for (var _i163 = 0; _i163 < _size158; ++_i163)
        {
          var elem164 = null;
          elem164 = new data_ttypes.TMutation();
          elem164.read(input);
          this.mutations.push(elem164);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_applyUpdates_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_applyUpdates_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 1);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.updateID) {
    output.writeFieldBegin('updateID', Thrift.Type.I64, 2);
    output.writeI64(this.updateID);
    output.writeFieldEnd();
  }
  if (this.keyExtent) {
    output.writeFieldBegin('keyExtent', Thrift.Type.STRUCT, 3);
    this.keyExtent.write(output);
    output.writeFieldEnd();
  }
  if (this.mutations) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter165 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter165))
      {
        iter165 = this.mutations[iter165];
        iter165.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_applyUpdates_result = function(args) {
};
TabletClientService_applyUpdates_result.prototype = {};
TabletClientService_applyUpdates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_applyUpdates_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_applyUpdates_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_closeUpdate_args = function(args) {
  this.tinfo = null;
  this.updateID = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.updateID !== undefined) {
      this.updateID = args.updateID;
    }
  }
};
TabletClientService_closeUpdate_args.prototype = {};
TabletClientService_closeUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.updateID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_closeUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_closeUpdate_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.updateID) {
    output.writeFieldBegin('updateID', Thrift.Type.I64, 1);
    output.writeI64(this.updateID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_closeUpdate_result = function(args) {
  this.success = null;
  this.nssi = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.nssi !== undefined) {
      this.nssi = args.nssi;
    }
  }
};
TabletClientService_closeUpdate_result.prototype = {};
TabletClientService_closeUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new data_ttypes.UpdateErrors();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nssi = new ttypes.NoSuchScanIDException();
        this.nssi.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_closeUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_closeUpdate_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nssi) {
    output.writeFieldBegin('nssi', Thrift.Type.STRUCT, 1);
    this.nssi.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_update_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.keyExtent = null;
  this.mutation = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.keyExtent !== undefined) {
      this.keyExtent = args.keyExtent;
    }
    if (args.mutation !== undefined) {
      this.mutation = args.mutation;
    }
  }
};
TabletClientService_update_args.prototype = {};
TabletClientService_update_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyExtent = new data_ttypes.TKeyExtent();
        this.keyExtent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutation = new data_ttypes.TMutation();
        this.mutation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_update_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_update_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.keyExtent) {
    output.writeFieldBegin('keyExtent', Thrift.Type.STRUCT, 2);
    this.keyExtent.write(output);
    output.writeFieldEnd();
  }
  if (this.mutation) {
    output.writeFieldBegin('mutation', Thrift.Type.STRUCT, 3);
    this.mutation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_update_result = function(args) {
  this.sec = null;
  this.nste = null;
  this.cve = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.nste !== undefined) {
      this.nste = args.nste;
    }
    if (args.cve !== undefined) {
      this.cve = args.cve;
    }
  }
};
TabletClientService_update_result.prototype = {};
TabletClientService_update_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nste = new ttypes.NotServingTabletException();
        this.nste.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cve = new ttypes.ConstraintViolationException();
        this.cve.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_update_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_update_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.nste) {
    output.writeFieldBegin('nste', Thrift.Type.STRUCT, 2);
    this.nste.write(output);
    output.writeFieldEnd();
  }
  if (this.cve) {
    output.writeFieldBegin('cve', Thrift.Type.STRUCT, 3);
    this.cve.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_bulkImport_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.tid = null;
  this.files = null;
  this.setTime = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.tid !== undefined) {
      this.tid = args.tid;
    }
    if (args.files !== undefined) {
      this.files = args.files;
    }
    if (args.setTime !== undefined) {
      this.setTime = args.setTime;
    }
  }
};
TabletClientService_bulkImport_args.prototype = {};
TabletClientService_bulkImport_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.tid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size166 = 0;
        var _rtmp3170;
        this.files = {};
        var _ktype167 = 0;
        var _vtype168 = 0;
        _rtmp3170 = input.readMapBegin();
        _ktype167 = _rtmp3170.ktype;
        _vtype168 = _rtmp3170.vtype;
        _size166 = _rtmp3170.size;
        for (var _i171 = 0; _i171 < _size166; ++_i171)
        {
          var key172 = null;
          var val173 = null;
          key172 = new data_ttypes.TKeyExtent();
          key172.read(input);
          var _size174 = 0;
          var _rtmp3178;
          val173 = {};
          var _ktype175 = 0;
          var _vtype176 = 0;
          _rtmp3178 = input.readMapBegin();
          _ktype175 = _rtmp3178.ktype;
          _vtype176 = _rtmp3178.vtype;
          _size174 = _rtmp3178.size;
          for (var _i179 = 0; _i179 < _size174; ++_i179)
          {
            var key180 = null;
            var val181 = null;
            key180 = input.readString();
            val181 = new data_ttypes.MapFileInfo();
            val181.read(input);
            val173[key180] = val181;
          }
          input.readMapEnd();
          this.files[key172] = val173;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.setTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_bulkImport_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_bulkImport_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.tid) {
    output.writeFieldBegin('tid', Thrift.Type.I64, 4);
    output.writeI64(this.tid);
    output.writeFieldEnd();
  }
  if (this.files) {
    output.writeFieldBegin('files', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.MAP, Thrift.objectLength(this.files));
    for (var kiter182 in this.files)
    {
      if (this.files.hasOwnProperty(kiter182))
      {
        var viter183 = this.files[kiter182];
        kiter182.write(output);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter183));
        for (var kiter184 in viter183)
        {
          if (viter183.hasOwnProperty(kiter184))
          {
            var viter185 = viter183[kiter184];
            output.writeString(kiter184);
            viter185.write(output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.setTime) {
    output.writeFieldBegin('setTime', Thrift.Type.BOOL, 5);
    output.writeBool(this.setTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_bulkImport_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
TabletClientService_bulkImport_result.prototype = {};
TabletClientService_bulkImport_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size186 = 0;
        var _rtmp3190;
        this.success = [];
        var _etype189 = 0;
        _rtmp3190 = input.readListBegin();
        _etype189 = _rtmp3190.etype;
        _size186 = _rtmp3190.size;
        for (var _i191 = 0; _i191 < _size186; ++_i191)
        {
          var elem192 = null;
          elem192 = new data_ttypes.TKeyExtent();
          elem192.read(input);
          this.success.push(elem192);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_bulkImport_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_bulkImport_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter193 in this.success)
    {
      if (this.success.hasOwnProperty(iter193))
      {
        iter193 = this.success[iter193];
        iter193.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_splitTablet_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.extent = null;
  this.splitPoint = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.extent !== undefined) {
      this.extent = args.extent;
    }
    if (args.splitPoint !== undefined) {
      this.splitPoint = args.splitPoint;
    }
  }
};
TabletClientService_splitTablet_args.prototype = {};
TabletClientService_splitTablet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.extent = new data_ttypes.TKeyExtent();
        this.extent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.splitPoint = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_splitTablet_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_splitTablet_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.extent) {
    output.writeFieldBegin('extent', Thrift.Type.STRUCT, 2);
    this.extent.write(output);
    output.writeFieldEnd();
  }
  if (this.splitPoint) {
    output.writeFieldBegin('splitPoint', Thrift.Type.STRING, 3);
    output.writeString(this.splitPoint);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_splitTablet_result = function(args) {
  this.sec = null;
  this.nste = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.nste !== undefined) {
      this.nste = args.nste;
    }
  }
};
TabletClientService_splitTablet_result.prototype = {};
TabletClientService_splitTablet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nste = new ttypes.NotServingTabletException();
        this.nste.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_splitTablet_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_splitTablet_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.nste) {
    output.writeFieldBegin('nste', Thrift.Type.STRUCT, 2);
    this.nste.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_loadTablet_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.lock = null;
  this.extent = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.lock !== undefined) {
      this.lock = args.lock;
    }
    if (args.extent !== undefined) {
      this.extent = args.extent;
    }
  }
};
TabletClientService_loadTablet_args.prototype = {};
TabletClientService_loadTablet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.lock = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.extent = new data_ttypes.TKeyExtent();
        this.extent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_loadTablet_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_loadTablet_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.lock) {
    output.writeFieldBegin('lock', Thrift.Type.STRING, 4);
    output.writeString(this.lock);
    output.writeFieldEnd();
  }
  if (this.extent) {
    output.writeFieldBegin('extent', Thrift.Type.STRUCT, 2);
    this.extent.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_loadTablet_result = function(args) {
};
TabletClientService_loadTablet_result.prototype = {};
TabletClientService_loadTablet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_loadTablet_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_loadTablet_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_unloadTablet_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.lock = null;
  this.extent = null;
  this.save = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.lock !== undefined) {
      this.lock = args.lock;
    }
    if (args.extent !== undefined) {
      this.extent = args.extent;
    }
    if (args.save !== undefined) {
      this.save = args.save;
    }
  }
};
TabletClientService_unloadTablet_args.prototype = {};
TabletClientService_unloadTablet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.lock = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.extent = new data_ttypes.TKeyExtent();
        this.extent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.save = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_unloadTablet_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_unloadTablet_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.lock) {
    output.writeFieldBegin('lock', Thrift.Type.STRING, 4);
    output.writeString(this.lock);
    output.writeFieldEnd();
  }
  if (this.extent) {
    output.writeFieldBegin('extent', Thrift.Type.STRUCT, 2);
    this.extent.write(output);
    output.writeFieldEnd();
  }
  if (this.save) {
    output.writeFieldBegin('save', Thrift.Type.BOOL, 3);
    output.writeBool(this.save);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_unloadTablet_result = function(args) {
};
TabletClientService_unloadTablet_result.prototype = {};
TabletClientService_unloadTablet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_unloadTablet_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_unloadTablet_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_flush_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.lock = null;
  this.tableId = null;
  this.startRow = null;
  this.endRow = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.lock !== undefined) {
      this.lock = args.lock;
    }
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.endRow !== undefined) {
      this.endRow = args.endRow;
    }
  }
};
TabletClientService_flush_args.prototype = {};
TabletClientService_flush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lock = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.endRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_flush_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_flush_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.lock) {
    output.writeFieldBegin('lock', Thrift.Type.STRING, 3);
    output.writeString(this.lock);
    output.writeFieldEnd();
  }
  if (this.tableId) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 2);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  if (this.startRow) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 5);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.endRow) {
    output.writeFieldBegin('endRow', Thrift.Type.STRING, 6);
    output.writeString(this.endRow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_flush_result = function(args) {
};
TabletClientService_flush_result.prototype = {};
TabletClientService_flush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_flush_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_flush_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_flushTablet_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.lock = null;
  this.extent = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.lock !== undefined) {
      this.lock = args.lock;
    }
    if (args.extent !== undefined) {
      this.extent = args.extent;
    }
  }
};
TabletClientService_flushTablet_args.prototype = {};
TabletClientService_flushTablet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lock = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.extent = new data_ttypes.TKeyExtent();
        this.extent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_flushTablet_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_flushTablet_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 1);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 2);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.lock) {
    output.writeFieldBegin('lock', Thrift.Type.STRING, 3);
    output.writeString(this.lock);
    output.writeFieldEnd();
  }
  if (this.extent) {
    output.writeFieldBegin('extent', Thrift.Type.STRUCT, 4);
    this.extent.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_flushTablet_result = function(args) {
};
TabletClientService_flushTablet_result.prototype = {};
TabletClientService_flushTablet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_flushTablet_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_flushTablet_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_chop_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.lock = null;
  this.extent = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.lock !== undefined) {
      this.lock = args.lock;
    }
    if (args.extent !== undefined) {
      this.extent = args.extent;
    }
  }
};
TabletClientService_chop_args.prototype = {};
TabletClientService_chop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lock = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.extent = new data_ttypes.TKeyExtent();
        this.extent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_chop_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_chop_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 1);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 2);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.lock) {
    output.writeFieldBegin('lock', Thrift.Type.STRING, 3);
    output.writeString(this.lock);
    output.writeFieldEnd();
  }
  if (this.extent) {
    output.writeFieldBegin('extent', Thrift.Type.STRUCT, 4);
    this.extent.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_chop_result = function(args) {
};
TabletClientService_chop_result.prototype = {};
TabletClientService_chop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_chop_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_chop_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_compact_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.lock = null;
  this.tableId = null;
  this.startRow = null;
  this.endRow = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.lock !== undefined) {
      this.lock = args.lock;
    }
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.endRow !== undefined) {
      this.endRow = args.endRow;
    }
  }
};
TabletClientService_compact_args.prototype = {};
TabletClientService_compact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lock = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.endRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_compact_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_compact_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 1);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 2);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.lock) {
    output.writeFieldBegin('lock', Thrift.Type.STRING, 3);
    output.writeString(this.lock);
    output.writeFieldEnd();
  }
  if (this.tableId) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 4);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  if (this.startRow) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 5);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.endRow) {
    output.writeFieldBegin('endRow', Thrift.Type.STRING, 6);
    output.writeString(this.endRow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_compact_result = function(args) {
};
TabletClientService_compact_result.prototype = {};
TabletClientService_compact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_compact_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_compact_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_useLoggers_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.loggers = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.loggers !== undefined) {
      this.loggers = args.loggers;
    }
  }
};
TabletClientService_useLoggers_args.prototype = {};
TabletClientService_useLoggers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size194 = 0;
        var _rtmp3198;
        this.loggers = [];
        var _etype197 = 0;
        _rtmp3198 = input.readSetBegin();
        _etype197 = _rtmp3198.etype;
        _size194 = _rtmp3198.size;
        for (var _i199 = 0; _i199 < _size194; ++_i199)
        {
          var elem200 = null;
          elem200 = input.readString();
          this.loggers.push(elem200);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_useLoggers_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_useLoggers_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.loggers) {
    output.writeFieldBegin('loggers', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.loggers.length);
    for (var iter201 in this.loggers)
    {
      if (this.loggers.hasOwnProperty(iter201))
      {
        iter201 = this.loggers[iter201];
        output.writeString(iter201);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_useLoggers_result = function(args) {
};
TabletClientService_useLoggers_result.prototype = {};
TabletClientService_useLoggers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_useLoggers_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_useLoggers_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_getTabletServerStatus_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
TabletClientService_getTabletServerStatus_args.prototype = {};
TabletClientService_getTabletServerStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_getTabletServerStatus_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_getTabletServerStatus_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_getTabletServerStatus_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
TabletClientService_getTabletServerStatus_result.prototype = {};
TabletClientService_getTabletServerStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new master_ttypes.TabletServerStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_getTabletServerStatus_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_getTabletServerStatus_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_getTabletStats_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.tableId = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
  }
};
TabletClientService_getTabletStats_args.prototype = {};
TabletClientService_getTabletStats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_getTabletStats_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_getTabletStats_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.tableId) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 2);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_getTabletStats_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
TabletClientService_getTabletStats_result.prototype = {};
TabletClientService_getTabletStats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size202 = 0;
        var _rtmp3206;
        this.success = [];
        var _etype205 = 0;
        _rtmp3206 = input.readListBegin();
        _etype205 = _rtmp3206.etype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          var elem208 = null;
          elem208 = new ttypes.TabletStats();
          elem208.read(input);
          this.success.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_getTabletStats_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_getTabletStats_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter209 in this.success)
    {
      if (this.success.hasOwnProperty(iter209))
      {
        iter209 = this.success[iter209];
        iter209.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_getHistoricalStats_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
TabletClientService_getHistoricalStats_args.prototype = {};
TabletClientService_getHistoricalStats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_getHistoricalStats_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_getHistoricalStats_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_getHistoricalStats_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
TabletClientService_getHistoricalStats_result.prototype = {};
TabletClientService_getHistoricalStats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TabletStats();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_getHistoricalStats_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_getHistoricalStats_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_halt_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.lock = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.lock !== undefined) {
      this.lock = args.lock;
    }
  }
};
TabletClientService_halt_args.prototype = {};
TabletClientService_halt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lock = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_halt_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_halt_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.lock) {
    output.writeFieldBegin('lock', Thrift.Type.STRING, 2);
    output.writeString(this.lock);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_halt_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
TabletClientService_halt_result.prototype = {};
TabletClientService_halt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_halt_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_halt_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_fastHalt_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.lock = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.lock !== undefined) {
      this.lock = args.lock;
    }
  }
};
TabletClientService_fastHalt_args.prototype = {};
TabletClientService_fastHalt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lock = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_fastHalt_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_fastHalt_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.lock) {
    output.writeFieldBegin('lock', Thrift.Type.STRING, 2);
    output.writeString(this.lock);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_fastHalt_result = function(args) {
};
TabletClientService_fastHalt_result.prototype = {};
TabletClientService_fastHalt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_fastHalt_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_fastHalt_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_getActiveScans_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
TabletClientService_getActiveScans_args.prototype = {};
TabletClientService_getActiveScans_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_getActiveScans_args.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_getActiveScans_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientService_getActiveScans_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
TabletClientService_getActiveScans_result.prototype = {};
TabletClientService_getActiveScans_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size210 = 0;
        var _rtmp3214;
        this.success = [];
        var _etype213 = 0;
        _rtmp3214 = input.readListBegin();
        _etype213 = _rtmp3214.etype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          var elem216 = null;
          elem216 = new ttypes.ActiveScan();
          elem216.read(input);
          this.success.push(elem216);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletClientService_getActiveScans_result.prototype.write = function(output) {
  output.writeStructBegin('TabletClientService_getActiveScans_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter217 in this.success)
    {
      if (this.success.hasOwnProperty(iter217))
      {
        iter217 = this.success[iter217];
        iter217.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletClientServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
Thrift.inherits(TabletClientServiceClient, ClientServiceClient)
TabletClientServiceClient.prototype.startScan = function(tinfo, credentials, extent, range, columns, batchSize, ssiList, ssio, authorizations, waitForWrites, isolated, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_startScan(tinfo, credentials, extent, range, columns, batchSize, ssiList, ssio, authorizations, waitForWrites, isolated);
};

TabletClientServiceClient.prototype.send_startScan = function(tinfo, credentials, extent, range, columns, batchSize, ssiList, ssio, authorizations, waitForWrites, isolated) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('startScan', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_startScan_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.extent = extent;
  args.range = range;
  args.columns = columns;
  args.batchSize = batchSize;
  args.ssiList = ssiList;
  args.ssio = ssio;
  args.authorizations = authorizations;
  args.waitForWrites = waitForWrites;
  args.isolated = isolated;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_startScan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_startScan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.nste) {
    return callback(result.nste);
  }
  if (null !== result.tmfe) {
    return callback(result.tmfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('startScan failed: unknown result');
};
TabletClientServiceClient.prototype.continueScan = function(tinfo, scanID, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_continueScan(tinfo, scanID);
};

TabletClientServiceClient.prototype.send_continueScan = function(tinfo, scanID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('continueScan', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_continueScan_args();
  args.tinfo = tinfo;
  args.scanID = scanID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_continueScan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_continueScan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nssi) {
    return callback(result.nssi);
  }
  if (null !== result.nste) {
    return callback(result.nste);
  }
  if (null !== result.tmfe) {
    return callback(result.tmfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('continueScan failed: unknown result');
};
TabletClientServiceClient.prototype.closeScan = function(tinfo, scanID, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_closeScan(tinfo, scanID);
};

TabletClientServiceClient.prototype.send_closeScan = function(tinfo, scanID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('closeScan', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_closeScan_args();
  args.tinfo = tinfo;
  args.scanID = scanID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
TabletClientServiceClient.prototype.startMultiScan = function(tinfo, credentials, batch, columns, ssiList, ssio, authorizations, waitForWrites, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_startMultiScan(tinfo, credentials, batch, columns, ssiList, ssio, authorizations, waitForWrites);
};

TabletClientServiceClient.prototype.send_startMultiScan = function(tinfo, credentials, batch, columns, ssiList, ssio, authorizations, waitForWrites) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('startMultiScan', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_startMultiScan_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.batch = batch;
  args.columns = columns;
  args.ssiList = ssiList;
  args.ssio = ssio;
  args.authorizations = authorizations;
  args.waitForWrites = waitForWrites;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_startMultiScan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_startMultiScan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('startMultiScan failed: unknown result');
};
TabletClientServiceClient.prototype.continueMultiScan = function(tinfo, scanID, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_continueMultiScan(tinfo, scanID);
};

TabletClientServiceClient.prototype.send_continueMultiScan = function(tinfo, scanID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('continueMultiScan', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_continueMultiScan_args();
  args.tinfo = tinfo;
  args.scanID = scanID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_continueMultiScan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_continueMultiScan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nssi) {
    return callback(result.nssi);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('continueMultiScan failed: unknown result');
};
TabletClientServiceClient.prototype.closeMultiScan = function(tinfo, scanID, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_closeMultiScan(tinfo, scanID);
};

TabletClientServiceClient.prototype.send_closeMultiScan = function(tinfo, scanID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('closeMultiScan', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_closeMultiScan_args();
  args.tinfo = tinfo;
  args.scanID = scanID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_closeMultiScan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_closeMultiScan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nssi) {
    return callback(result.nssi);
  }
  callback(null)
};
TabletClientServiceClient.prototype.startUpdate = function(tinfo, credentials, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_startUpdate(tinfo, credentials);
};

TabletClientServiceClient.prototype.send_startUpdate = function(tinfo, credentials) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('startUpdate', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_startUpdate_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_startUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_startUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('startUpdate failed: unknown result');
};
TabletClientServiceClient.prototype.applyUpdates = function(tinfo, updateID, keyExtent, mutations, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_applyUpdates(tinfo, updateID, keyExtent, mutations);
};

TabletClientServiceClient.prototype.send_applyUpdates = function(tinfo, updateID, keyExtent, mutations) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyUpdates', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_applyUpdates_args();
  args.tinfo = tinfo;
  args.updateID = updateID;
  args.keyExtent = keyExtent;
  args.mutations = mutations;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
TabletClientServiceClient.prototype.closeUpdate = function(tinfo, updateID, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_closeUpdate(tinfo, updateID);
};

TabletClientServiceClient.prototype.send_closeUpdate = function(tinfo, updateID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('closeUpdate', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_closeUpdate_args();
  args.tinfo = tinfo;
  args.updateID = updateID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_closeUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_closeUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nssi) {
    return callback(result.nssi);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('closeUpdate failed: unknown result');
};
TabletClientServiceClient.prototype.update = function(tinfo, credentials, keyExtent, mutation, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_update(tinfo, credentials, keyExtent, mutation);
};

TabletClientServiceClient.prototype.send_update = function(tinfo, credentials, keyExtent, mutation) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('update', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_update_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.keyExtent = keyExtent;
  args.mutation = mutation;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_update = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_update_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.nste) {
    return callback(result.nste);
  }
  if (null !== result.cve) {
    return callback(result.cve);
  }
  callback(null)
};
TabletClientServiceClient.prototype.bulkImport = function(tinfo, credentials, tid, files, setTime, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_bulkImport(tinfo, credentials, tid, files, setTime);
};

TabletClientServiceClient.prototype.send_bulkImport = function(tinfo, credentials, tid, files, setTime) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('bulkImport', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_bulkImport_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.tid = tid;
  args.files = files;
  args.setTime = setTime;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_bulkImport = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_bulkImport_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('bulkImport failed: unknown result');
};
TabletClientServiceClient.prototype.splitTablet = function(tinfo, credentials, extent, splitPoint, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_splitTablet(tinfo, credentials, extent, splitPoint);
};

TabletClientServiceClient.prototype.send_splitTablet = function(tinfo, credentials, extent, splitPoint) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('splitTablet', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_splitTablet_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.extent = extent;
  args.splitPoint = splitPoint;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_splitTablet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_splitTablet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.nste) {
    return callback(result.nste);
  }
  callback(null)
};
TabletClientServiceClient.prototype.loadTablet = function(tinfo, credentials, lock, extent, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_loadTablet(tinfo, credentials, lock, extent);
};

TabletClientServiceClient.prototype.send_loadTablet = function(tinfo, credentials, lock, extent) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadTablet', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_loadTablet_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.lock = lock;
  args.extent = extent;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
TabletClientServiceClient.prototype.unloadTablet = function(tinfo, credentials, lock, extent, save, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_unloadTablet(tinfo, credentials, lock, extent, save);
};

TabletClientServiceClient.prototype.send_unloadTablet = function(tinfo, credentials, lock, extent, save) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unloadTablet', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_unloadTablet_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.lock = lock;
  args.extent = extent;
  args.save = save;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
TabletClientServiceClient.prototype.flush = function(tinfo, credentials, lock, tableId, startRow, endRow, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_flush(tinfo, credentials, lock, tableId, startRow, endRow);
};

TabletClientServiceClient.prototype.send_flush = function(tinfo, credentials, lock, tableId, startRow, endRow) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('flush', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_flush_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.lock = lock;
  args.tableId = tableId;
  args.startRow = startRow;
  args.endRow = endRow;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
TabletClientServiceClient.prototype.flushTablet = function(tinfo, credentials, lock, extent, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_flushTablet(tinfo, credentials, lock, extent);
};

TabletClientServiceClient.prototype.send_flushTablet = function(tinfo, credentials, lock, extent) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('flushTablet', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_flushTablet_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.lock = lock;
  args.extent = extent;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
TabletClientServiceClient.prototype.chop = function(tinfo, credentials, lock, extent, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_chop(tinfo, credentials, lock, extent);
};

TabletClientServiceClient.prototype.send_chop = function(tinfo, credentials, lock, extent) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('chop', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_chop_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.lock = lock;
  args.extent = extent;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
TabletClientServiceClient.prototype.compact = function(tinfo, credentials, lock, tableId, startRow, endRow, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_compact(tinfo, credentials, lock, tableId, startRow, endRow);
};

TabletClientServiceClient.prototype.send_compact = function(tinfo, credentials, lock, tableId, startRow, endRow) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('compact', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_compact_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.lock = lock;
  args.tableId = tableId;
  args.startRow = startRow;
  args.endRow = endRow;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
TabletClientServiceClient.prototype.useLoggers = function(tinfo, credentials, loggers, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_useLoggers(tinfo, credentials, loggers);
};

TabletClientServiceClient.prototype.send_useLoggers = function(tinfo, credentials, loggers) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('useLoggers', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_useLoggers_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.loggers = loggers;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
TabletClientServiceClient.prototype.getTabletServerStatus = function(tinfo, credentials, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTabletServerStatus(tinfo, credentials);
};

TabletClientServiceClient.prototype.send_getTabletServerStatus = function(tinfo, credentials) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTabletServerStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_getTabletServerStatus_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_getTabletServerStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_getTabletServerStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTabletServerStatus failed: unknown result');
};
TabletClientServiceClient.prototype.getTabletStats = function(tinfo, credentials, tableId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTabletStats(tinfo, credentials, tableId);
};

TabletClientServiceClient.prototype.send_getTabletStats = function(tinfo, credentials, tableId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTabletStats', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_getTabletStats_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.tableId = tableId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_getTabletStats = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_getTabletStats_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTabletStats failed: unknown result');
};
TabletClientServiceClient.prototype.getHistoricalStats = function(tinfo, credentials, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getHistoricalStats(tinfo, credentials);
};

TabletClientServiceClient.prototype.send_getHistoricalStats = function(tinfo, credentials) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getHistoricalStats', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_getHistoricalStats_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_getHistoricalStats = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_getHistoricalStats_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getHistoricalStats failed: unknown result');
};
TabletClientServiceClient.prototype.halt = function(tinfo, credentials, lock, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_halt(tinfo, credentials, lock);
};

TabletClientServiceClient.prototype.send_halt = function(tinfo, credentials, lock) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('halt', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_halt_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.lock = lock;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_halt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_halt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
TabletClientServiceClient.prototype.fastHalt = function(tinfo, credentials, lock, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_fastHalt(tinfo, credentials, lock);
};

TabletClientServiceClient.prototype.send_fastHalt = function(tinfo, credentials, lock) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fastHalt', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_fastHalt_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.lock = lock;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
TabletClientServiceClient.prototype.getActiveScans = function(tinfo, credentials, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getActiveScans(tinfo, credentials);
};

TabletClientServiceClient.prototype.send_getActiveScans = function(tinfo, credentials) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getActiveScans', Thrift.MessageType.CALL, this.seqid);
  var args = new TabletClientService_getActiveScans_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TabletClientServiceClient.prototype.recv_getActiveScans = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TabletClientService_getActiveScans_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getActiveScans failed: unknown result');
};
var TabletClientServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
TabletClientServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

TabletClientServiceProcessor.prototype.process_startScan = function(seqid, input, output) {
  var args = new TabletClientService_startScan_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_startScan_result();
  this._handler.startScan(args.tinfo, args.credentials, args.extent, args.range, args.columns, args.batchSize, args.ssiList, args.ssio, args.authorizations, args.waitForWrites, args.isolated, function (success) {
    result.success = success;
    output.writeMessageBegin("startScan", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_continueScan = function(seqid, input, output) {
  var args = new TabletClientService_continueScan_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_continueScan_result();
  this._handler.continueScan(args.tinfo, args.scanID, function (success) {
    result.success = success;
    output.writeMessageBegin("continueScan", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_closeScan = function(seqid, input, output) {
  var args = new TabletClientService_closeScan_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.closeScan(args.tinfo, args.scanID)
}

TabletClientServiceProcessor.prototype.process_startMultiScan = function(seqid, input, output) {
  var args = new TabletClientService_startMultiScan_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_startMultiScan_result();
  this._handler.startMultiScan(args.tinfo, args.credentials, args.batch, args.columns, args.ssiList, args.ssio, args.authorizations, args.waitForWrites, function (success) {
    result.success = success;
    output.writeMessageBegin("startMultiScan", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_continueMultiScan = function(seqid, input, output) {
  var args = new TabletClientService_continueMultiScan_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_continueMultiScan_result();
  this._handler.continueMultiScan(args.tinfo, args.scanID, function (success) {
    result.success = success;
    output.writeMessageBegin("continueMultiScan", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_closeMultiScan = function(seqid, input, output) {
  var args = new TabletClientService_closeMultiScan_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_closeMultiScan_result();
  this._handler.closeMultiScan(args.tinfo, args.scanID, function (success) {
    result.success = success;
    output.writeMessageBegin("closeMultiScan", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_startUpdate = function(seqid, input, output) {
  var args = new TabletClientService_startUpdate_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_startUpdate_result();
  this._handler.startUpdate(args.tinfo, args.credentials, function (success) {
    result.success = success;
    output.writeMessageBegin("startUpdate", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_applyUpdates = function(seqid, input, output) {
  var args = new TabletClientService_applyUpdates_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.applyUpdates(args.tinfo, args.updateID, args.keyExtent, args.mutations)
}

TabletClientServiceProcessor.prototype.process_closeUpdate = function(seqid, input, output) {
  var args = new TabletClientService_closeUpdate_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_closeUpdate_result();
  this._handler.closeUpdate(args.tinfo, args.updateID, function (success) {
    result.success = success;
    output.writeMessageBegin("closeUpdate", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_update = function(seqid, input, output) {
  var args = new TabletClientService_update_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_update_result();
  this._handler.update(args.tinfo, args.credentials, args.keyExtent, args.mutation, function (success) {
    result.success = success;
    output.writeMessageBegin("update", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_bulkImport = function(seqid, input, output) {
  var args = new TabletClientService_bulkImport_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_bulkImport_result();
  this._handler.bulkImport(args.tinfo, args.credentials, args.tid, args.files, args.setTime, function (success) {
    result.success = success;
    output.writeMessageBegin("bulkImport", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_splitTablet = function(seqid, input, output) {
  var args = new TabletClientService_splitTablet_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_splitTablet_result();
  this._handler.splitTablet(args.tinfo, args.credentials, args.extent, args.splitPoint, function (success) {
    result.success = success;
    output.writeMessageBegin("splitTablet", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_loadTablet = function(seqid, input, output) {
  var args = new TabletClientService_loadTablet_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.loadTablet(args.tinfo, args.credentials, args.lock, args.extent)
}

TabletClientServiceProcessor.prototype.process_unloadTablet = function(seqid, input, output) {
  var args = new TabletClientService_unloadTablet_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.unloadTablet(args.tinfo, args.credentials, args.lock, args.extent, args.save)
}

TabletClientServiceProcessor.prototype.process_flush = function(seqid, input, output) {
  var args = new TabletClientService_flush_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.flush(args.tinfo, args.credentials, args.lock, args.tableId, args.startRow, args.endRow)
}

TabletClientServiceProcessor.prototype.process_flushTablet = function(seqid, input, output) {
  var args = new TabletClientService_flushTablet_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.flushTablet(args.tinfo, args.credentials, args.lock, args.extent)
}

TabletClientServiceProcessor.prototype.process_chop = function(seqid, input, output) {
  var args = new TabletClientService_chop_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.chop(args.tinfo, args.credentials, args.lock, args.extent)
}

TabletClientServiceProcessor.prototype.process_compact = function(seqid, input, output) {
  var args = new TabletClientService_compact_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.compact(args.tinfo, args.credentials, args.lock, args.tableId, args.startRow, args.endRow)
}

TabletClientServiceProcessor.prototype.process_useLoggers = function(seqid, input, output) {
  var args = new TabletClientService_useLoggers_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.useLoggers(args.tinfo, args.credentials, args.loggers)
}

TabletClientServiceProcessor.prototype.process_getTabletServerStatus = function(seqid, input, output) {
  var args = new TabletClientService_getTabletServerStatus_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_getTabletServerStatus_result();
  this._handler.getTabletServerStatus(args.tinfo, args.credentials, function (success) {
    result.success = success;
    output.writeMessageBegin("getTabletServerStatus", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_getTabletStats = function(seqid, input, output) {
  var args = new TabletClientService_getTabletStats_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_getTabletStats_result();
  this._handler.getTabletStats(args.tinfo, args.credentials, args.tableId, function (success) {
    result.success = success;
    output.writeMessageBegin("getTabletStats", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_getHistoricalStats = function(seqid, input, output) {
  var args = new TabletClientService_getHistoricalStats_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_getHistoricalStats_result();
  this._handler.getHistoricalStats(args.tinfo, args.credentials, function (success) {
    result.success = success;
    output.writeMessageBegin("getHistoricalStats", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_halt = function(seqid, input, output) {
  var args = new TabletClientService_halt_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_halt_result();
  this._handler.halt(args.tinfo, args.credentials, args.lock, function (success) {
    result.success = success;
    output.writeMessageBegin("halt", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TabletClientServiceProcessor.prototype.process_fastHalt = function(seqid, input, output) {
  var args = new TabletClientService_fastHalt_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.fastHalt(args.tinfo, args.credentials, args.lock)
}

TabletClientServiceProcessor.prototype.process_getActiveScans = function(seqid, input, output) {
  var args = new TabletClientService_getActiveScans_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TabletClientService_getActiveScans_result();
  this._handler.getActiveScans(args.tinfo, args.credentials, function (success) {
    result.success = success;
    output.writeMessageBegin("getActiveScans", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

