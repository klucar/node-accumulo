//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var data_ttypes = require('./data_types')
var security_ttypes = require('./security_types')
var client_ttypes = require('./client_types')
var master_ttypes = require('./master_types')
var cloudtrace_ttypes = require('./cloudtrace_types')


var ttypes = require('./tabletserver_types');
//HELPER FUNCTIONS AND STRUCTURES

var MutationLogger_create_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.tserverSession = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.tserverSession !== undefined) {
      this.tserverSession = args.tserverSession;
    }
  }
};
MutationLogger_create_args.prototype = {};
MutationLogger_create_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tserverSession = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_create_args.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_create_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.tserverSession) {
    output.writeFieldBegin('tserverSession', Thrift.Type.STRING, 2);
    output.writeString(this.tserverSession);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_create_result = function(args) {
  this.success = null;
  this.sec = null;
  this.lce = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.lce !== undefined) {
      this.lce = args.lce;
    }
  }
};
MutationLogger_create_result.prototype = {};
MutationLogger_create_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.LogFile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lce = new ttypes.LoggerClosedException();
        this.lce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_create_result.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_create_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.lce) {
    output.writeFieldBegin('lce', Thrift.Type.STRUCT, 2);
    this.lce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_defineTablet_args = function(args) {
  this.tinfo = null;
  this.id = null;
  this.seq = null;
  this.tid = null;
  this.tablet = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.seq !== undefined) {
      this.seq = args.seq;
    }
    if (args.tid !== undefined) {
      this.tid = args.tid;
    }
    if (args.tablet !== undefined) {
      this.tablet = args.tablet;
    }
  }
};
MutationLogger_defineTablet_args.prototype = {};
MutationLogger_defineTablet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.seq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tablet = new data_ttypes.TKeyExtent();
        this.tablet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_defineTablet_args.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_defineTablet_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.seq) {
    output.writeFieldBegin('seq', Thrift.Type.I64, 2);
    output.writeI64(this.seq);
    output.writeFieldEnd();
  }
  if (this.tid) {
    output.writeFieldBegin('tid', Thrift.Type.I32, 3);
    output.writeI32(this.tid);
    output.writeFieldEnd();
  }
  if (this.tablet) {
    output.writeFieldBegin('tablet', Thrift.Type.STRUCT, 4);
    this.tablet.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_defineTablet_result = function(args) {
  this.nsli = null;
  this.lce = null;
  if (args) {
    if (args.nsli !== undefined) {
      this.nsli = args.nsli;
    }
    if (args.lce !== undefined) {
      this.lce = args.lce;
    }
  }
};
MutationLogger_defineTablet_result.prototype = {};
MutationLogger_defineTablet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsli = new ttypes.NoSuchLogIDException();
        this.nsli.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lce = new ttypes.LoggerClosedException();
        this.lce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_defineTablet_result.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_defineTablet_result');
  if (this.nsli) {
    output.writeFieldBegin('nsli', Thrift.Type.STRUCT, 1);
    this.nsli.write(output);
    output.writeFieldEnd();
  }
  if (this.lce) {
    output.writeFieldBegin('lce', Thrift.Type.STRUCT, 2);
    this.lce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_log_args = function(args) {
  this.tinfo = null;
  this.id = null;
  this.seq = null;
  this.tid = null;
  this.mutation = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.seq !== undefined) {
      this.seq = args.seq;
    }
    if (args.tid !== undefined) {
      this.tid = args.tid;
    }
    if (args.mutation !== undefined) {
      this.mutation = args.mutation;
    }
  }
};
MutationLogger_log_args.prototype = {};
MutationLogger_log_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.seq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutation = new data_ttypes.TMutation();
        this.mutation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_log_args.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_log_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.seq) {
    output.writeFieldBegin('seq', Thrift.Type.I64, 2);
    output.writeI64(this.seq);
    output.writeFieldEnd();
  }
  if (this.tid) {
    output.writeFieldBegin('tid', Thrift.Type.I32, 3);
    output.writeI32(this.tid);
    output.writeFieldEnd();
  }
  if (this.mutation) {
    output.writeFieldBegin('mutation', Thrift.Type.STRUCT, 4);
    this.mutation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_log_result = function(args) {
  this.nsli = null;
  this.lce = null;
  if (args) {
    if (args.nsli !== undefined) {
      this.nsli = args.nsli;
    }
    if (args.lce !== undefined) {
      this.lce = args.lce;
    }
  }
};
MutationLogger_log_result.prototype = {};
MutationLogger_log_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsli = new ttypes.NoSuchLogIDException();
        this.nsli.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lce = new ttypes.LoggerClosedException();
        this.lce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_log_result.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_log_result');
  if (this.nsli) {
    output.writeFieldBegin('nsli', Thrift.Type.STRUCT, 1);
    this.nsli.write(output);
    output.writeFieldEnd();
  }
  if (this.lce) {
    output.writeFieldBegin('lce', Thrift.Type.STRUCT, 2);
    this.lce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_logManyTablets_args = function(args) {
  this.tinfo = null;
  this.id = null;
  this.mutations = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
  }
};
MutationLogger_logManyTablets_args.prototype = {};
MutationLogger_logManyTablets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size218 = 0;
        var _rtmp3222;
        this.mutations = [];
        var _etype221 = 0;
        _rtmp3222 = input.readListBegin();
        _etype221 = _rtmp3222.etype;
        _size218 = _rtmp3222.size;
        for (var _i223 = 0; _i223 < _size218; ++_i223)
        {
          var elem224 = null;
          elem224 = new ttypes.TabletMutations();
          elem224.read(input);
          this.mutations.push(elem224);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_logManyTablets_args.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_logManyTablets_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.mutations) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter225 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter225))
      {
        iter225 = this.mutations[iter225];
        iter225.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_logManyTablets_result = function(args) {
  this.nsli = null;
  this.lce = null;
  if (args) {
    if (args.nsli !== undefined) {
      this.nsli = args.nsli;
    }
    if (args.lce !== undefined) {
      this.lce = args.lce;
    }
  }
};
MutationLogger_logManyTablets_result.prototype = {};
MutationLogger_logManyTablets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsli = new ttypes.NoSuchLogIDException();
        this.nsli.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lce = new ttypes.LoggerClosedException();
        this.lce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_logManyTablets_result.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_logManyTablets_result');
  if (this.nsli) {
    output.writeFieldBegin('nsli', Thrift.Type.STRUCT, 1);
    this.nsli.write(output);
    output.writeFieldEnd();
  }
  if (this.lce) {
    output.writeFieldBegin('lce', Thrift.Type.STRUCT, 2);
    this.lce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_minorCompactionStarted_args = function(args) {
  this.tinfo = null;
  this.id = null;
  this.seq = null;
  this.tid = null;
  this.fqfn = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.seq !== undefined) {
      this.seq = args.seq;
    }
    if (args.tid !== undefined) {
      this.tid = args.tid;
    }
    if (args.fqfn !== undefined) {
      this.fqfn = args.fqfn;
    }
  }
};
MutationLogger_minorCompactionStarted_args.prototype = {};
MutationLogger_minorCompactionStarted_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.seq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fqfn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_minorCompactionStarted_args.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_minorCompactionStarted_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.seq) {
    output.writeFieldBegin('seq', Thrift.Type.I64, 2);
    output.writeI64(this.seq);
    output.writeFieldEnd();
  }
  if (this.tid) {
    output.writeFieldBegin('tid', Thrift.Type.I32, 3);
    output.writeI32(this.tid);
    output.writeFieldEnd();
  }
  if (this.fqfn) {
    output.writeFieldBegin('fqfn', Thrift.Type.STRING, 4);
    output.writeString(this.fqfn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_minorCompactionStarted_result = function(args) {
  this.nsli = null;
  this.lce = null;
  if (args) {
    if (args.nsli !== undefined) {
      this.nsli = args.nsli;
    }
    if (args.lce !== undefined) {
      this.lce = args.lce;
    }
  }
};
MutationLogger_minorCompactionStarted_result.prototype = {};
MutationLogger_minorCompactionStarted_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsli = new ttypes.NoSuchLogIDException();
        this.nsli.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lce = new ttypes.LoggerClosedException();
        this.lce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_minorCompactionStarted_result.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_minorCompactionStarted_result');
  if (this.nsli) {
    output.writeFieldBegin('nsli', Thrift.Type.STRUCT, 1);
    this.nsli.write(output);
    output.writeFieldEnd();
  }
  if (this.lce) {
    output.writeFieldBegin('lce', Thrift.Type.STRUCT, 2);
    this.lce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_minorCompactionFinished_args = function(args) {
  this.tinfo = null;
  this.id = null;
  this.seq = null;
  this.tid = null;
  this.fqfn = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.seq !== undefined) {
      this.seq = args.seq;
    }
    if (args.tid !== undefined) {
      this.tid = args.tid;
    }
    if (args.fqfn !== undefined) {
      this.fqfn = args.fqfn;
    }
  }
};
MutationLogger_minorCompactionFinished_args.prototype = {};
MutationLogger_minorCompactionFinished_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.seq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fqfn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_minorCompactionFinished_args.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_minorCompactionFinished_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.seq) {
    output.writeFieldBegin('seq', Thrift.Type.I64, 2);
    output.writeI64(this.seq);
    output.writeFieldEnd();
  }
  if (this.tid) {
    output.writeFieldBegin('tid', Thrift.Type.I32, 3);
    output.writeI32(this.tid);
    output.writeFieldEnd();
  }
  if (this.fqfn) {
    output.writeFieldBegin('fqfn', Thrift.Type.STRING, 4);
    output.writeString(this.fqfn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_minorCompactionFinished_result = function(args) {
  this.nsli = null;
  this.lce = null;
  if (args) {
    if (args.nsli !== undefined) {
      this.nsli = args.nsli;
    }
    if (args.lce !== undefined) {
      this.lce = args.lce;
    }
  }
};
MutationLogger_minorCompactionFinished_result.prototype = {};
MutationLogger_minorCompactionFinished_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsli = new ttypes.NoSuchLogIDException();
        this.nsli.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lce = new ttypes.LoggerClosedException();
        this.lce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_minorCompactionFinished_result.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_minorCompactionFinished_result');
  if (this.nsli) {
    output.writeFieldBegin('nsli', Thrift.Type.STRUCT, 1);
    this.nsli.write(output);
    output.writeFieldEnd();
  }
  if (this.lce) {
    output.writeFieldBegin('lce', Thrift.Type.STRUCT, 2);
    this.lce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_close_args = function(args) {
  this.tinfo = null;
  this.id = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MutationLogger_close_args.prototype = {};
MutationLogger_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_close_args.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_close_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_close_result = function(args) {
  this.nsli = null;
  this.lce = null;
  if (args) {
    if (args.nsli !== undefined) {
      this.nsli = args.nsli;
    }
    if (args.lce !== undefined) {
      this.lce = args.lce;
    }
  }
};
MutationLogger_close_result.prototype = {};
MutationLogger_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nsli = new ttypes.NoSuchLogIDException();
        this.nsli.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lce = new ttypes.LoggerClosedException();
        this.lce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_close_result.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_close_result');
  if (this.nsli) {
    output.writeFieldBegin('nsli', Thrift.Type.STRUCT, 1);
    this.nsli.write(output);
    output.writeFieldEnd();
  }
  if (this.lce) {
    output.writeFieldBegin('lce', Thrift.Type.STRUCT, 2);
    this.lce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_startCopy_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.name = null;
  this.fullyQualifiedFileName = null;
  this.sort = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.fullyQualifiedFileName !== undefined) {
      this.fullyQualifiedFileName = args.fullyQualifiedFileName;
    }
    if (args.sort !== undefined) {
      this.sort = args.sort;
    }
  }
};
MutationLogger_startCopy_args.prototype = {};
MutationLogger_startCopy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fullyQualifiedFileName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.sort = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_startCopy_args.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_startCopy_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.fullyQualifiedFileName) {
    output.writeFieldBegin('fullyQualifiedFileName', Thrift.Type.STRING, 3);
    output.writeString(this.fullyQualifiedFileName);
    output.writeFieldEnd();
  }
  if (this.sort) {
    output.writeFieldBegin('sort', Thrift.Type.BOOL, 5);
    output.writeBool(this.sort);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_startCopy_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
MutationLogger_startCopy_result.prototype = {};
MutationLogger_startCopy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_startCopy_result.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_startCopy_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_getClosedLogs_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
MutationLogger_getClosedLogs_args.prototype = {};
MutationLogger_getClosedLogs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_getClosedLogs_args.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_getClosedLogs_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_getClosedLogs_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
MutationLogger_getClosedLogs_result.prototype = {};
MutationLogger_getClosedLogs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size226 = 0;
        var _rtmp3230;
        this.success = [];
        var _etype229 = 0;
        _rtmp3230 = input.readListBegin();
        _etype229 = _rtmp3230.etype;
        _size226 = _rtmp3230.size;
        for (var _i231 = 0; _i231 < _size226; ++_i231)
        {
          var elem232 = null;
          elem232 = input.readString();
          this.success.push(elem232);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_getClosedLogs_result.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_getClosedLogs_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter233 in this.success)
    {
      if (this.success.hasOwnProperty(iter233))
      {
        iter233 = this.success[iter233];
        output.writeString(iter233);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_remove_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.files = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.files !== undefined) {
      this.files = args.files;
    }
  }
};
MutationLogger_remove_args.prototype = {};
MutationLogger_remove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size234 = 0;
        var _rtmp3238;
        this.files = [];
        var _etype237 = 0;
        _rtmp3238 = input.readListBegin();
        _etype237 = _rtmp3238.etype;
        _size234 = _rtmp3238.size;
        for (var _i239 = 0; _i239 < _size234; ++_i239)
        {
          var elem240 = null;
          elem240 = input.readString();
          this.files.push(elem240);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_remove_args.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_remove_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.files) {
    output.writeFieldBegin('files', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.files.length);
    for (var iter241 in this.files)
    {
      if (this.files.hasOwnProperty(iter241))
      {
        iter241 = this.files[iter241];
        output.writeString(iter241);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_remove_result = function(args) {
};
MutationLogger_remove_result.prototype = {};
MutationLogger_remove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_remove_result.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_remove_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_beginShutdown_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
MutationLogger_beginShutdown_args.prototype = {};
MutationLogger_beginShutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_beginShutdown_args.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_beginShutdown_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 1);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 2);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_beginShutdown_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
MutationLogger_beginShutdown_result.prototype = {};
MutationLogger_beginShutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_beginShutdown_result.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_beginShutdown_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_halt_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
MutationLogger_halt_args.prototype = {};
MutationLogger_halt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_halt_args.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_halt_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 1);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 2);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLogger_halt_result = function(args) {
};
MutationLogger_halt_result.prototype = {};
MutationLogger_halt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogger_halt_result.prototype.write = function(output) {
  output.writeStructBegin('MutationLogger_halt_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MutationLoggerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
MutationLoggerClient.prototype = {};
MutationLoggerClient.prototype.create = function(tinfo, credentials, tserverSession, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_create(tinfo, credentials, tserverSession);
};

MutationLoggerClient.prototype.send_create = function(tinfo, credentials, tserverSession) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create', Thrift.MessageType.CALL, this.seqid);
  var args = new MutationLogger_create_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.tserverSession = tserverSession;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MutationLoggerClient.prototype.recv_create = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MutationLogger_create_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.lce) {
    return callback(result.lce);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create failed: unknown result');
};
MutationLoggerClient.prototype.defineTablet = function(tinfo, id, seq, tid, tablet, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_defineTablet(tinfo, id, seq, tid, tablet);
};

MutationLoggerClient.prototype.send_defineTablet = function(tinfo, id, seq, tid, tablet) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('defineTablet', Thrift.MessageType.CALL, this.seqid);
  var args = new MutationLogger_defineTablet_args();
  args.tinfo = tinfo;
  args.id = id;
  args.seq = seq;
  args.tid = tid;
  args.tablet = tablet;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MutationLoggerClient.prototype.recv_defineTablet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MutationLogger_defineTablet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nsli) {
    return callback(result.nsli);
  }
  if (null !== result.lce) {
    return callback(result.lce);
  }
  callback(null)
};
MutationLoggerClient.prototype.log = function(tinfo, id, seq, tid, mutation, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_log(tinfo, id, seq, tid, mutation);
};

MutationLoggerClient.prototype.send_log = function(tinfo, id, seq, tid, mutation) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('log', Thrift.MessageType.CALL, this.seqid);
  var args = new MutationLogger_log_args();
  args.tinfo = tinfo;
  args.id = id;
  args.seq = seq;
  args.tid = tid;
  args.mutation = mutation;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MutationLoggerClient.prototype.recv_log = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MutationLogger_log_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nsli) {
    return callback(result.nsli);
  }
  if (null !== result.lce) {
    return callback(result.lce);
  }
  callback(null)
};
MutationLoggerClient.prototype.logManyTablets = function(tinfo, id, mutations, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_logManyTablets(tinfo, id, mutations);
};

MutationLoggerClient.prototype.send_logManyTablets = function(tinfo, id, mutations) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('logManyTablets', Thrift.MessageType.CALL, this.seqid);
  var args = new MutationLogger_logManyTablets_args();
  args.tinfo = tinfo;
  args.id = id;
  args.mutations = mutations;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MutationLoggerClient.prototype.recv_logManyTablets = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MutationLogger_logManyTablets_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nsli) {
    return callback(result.nsli);
  }
  if (null !== result.lce) {
    return callback(result.lce);
  }
  callback(null)
};
MutationLoggerClient.prototype.minorCompactionStarted = function(tinfo, id, seq, tid, fqfn, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_minorCompactionStarted(tinfo, id, seq, tid, fqfn);
};

MutationLoggerClient.prototype.send_minorCompactionStarted = function(tinfo, id, seq, tid, fqfn) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('minorCompactionStarted', Thrift.MessageType.CALL, this.seqid);
  var args = new MutationLogger_minorCompactionStarted_args();
  args.tinfo = tinfo;
  args.id = id;
  args.seq = seq;
  args.tid = tid;
  args.fqfn = fqfn;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MutationLoggerClient.prototype.recv_minorCompactionStarted = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MutationLogger_minorCompactionStarted_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nsli) {
    return callback(result.nsli);
  }
  if (null !== result.lce) {
    return callback(result.lce);
  }
  callback(null)
};
MutationLoggerClient.prototype.minorCompactionFinished = function(tinfo, id, seq, tid, fqfn, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_minorCompactionFinished(tinfo, id, seq, tid, fqfn);
};

MutationLoggerClient.prototype.send_minorCompactionFinished = function(tinfo, id, seq, tid, fqfn) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('minorCompactionFinished', Thrift.MessageType.CALL, this.seqid);
  var args = new MutationLogger_minorCompactionFinished_args();
  args.tinfo = tinfo;
  args.id = id;
  args.seq = seq;
  args.tid = tid;
  args.fqfn = fqfn;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MutationLoggerClient.prototype.recv_minorCompactionFinished = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MutationLogger_minorCompactionFinished_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nsli) {
    return callback(result.nsli);
  }
  if (null !== result.lce) {
    return callback(result.lce);
  }
  callback(null)
};
MutationLoggerClient.prototype.close = function(tinfo, id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_close(tinfo, id);
};

MutationLoggerClient.prototype.send_close = function(tinfo, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('close', Thrift.MessageType.CALL, this.seqid);
  var args = new MutationLogger_close_args();
  args.tinfo = tinfo;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MutationLoggerClient.prototype.recv_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MutationLogger_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nsli) {
    return callback(result.nsli);
  }
  if (null !== result.lce) {
    return callback(result.lce);
  }
  callback(null)
};
MutationLoggerClient.prototype.startCopy = function(tinfo, credentials, name, fullyQualifiedFileName, sort, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_startCopy(tinfo, credentials, name, fullyQualifiedFileName, sort);
};

MutationLoggerClient.prototype.send_startCopy = function(tinfo, credentials, name, fullyQualifiedFileName, sort) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('startCopy', Thrift.MessageType.CALL, this.seqid);
  var args = new MutationLogger_startCopy_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.name = name;
  args.fullyQualifiedFileName = fullyQualifiedFileName;
  args.sort = sort;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MutationLoggerClient.prototype.recv_startCopy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MutationLogger_startCopy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('startCopy failed: unknown result');
};
MutationLoggerClient.prototype.getClosedLogs = function(tinfo, credentials, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getClosedLogs(tinfo, credentials);
};

MutationLoggerClient.prototype.send_getClosedLogs = function(tinfo, credentials) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getClosedLogs', Thrift.MessageType.CALL, this.seqid);
  var args = new MutationLogger_getClosedLogs_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MutationLoggerClient.prototype.recv_getClosedLogs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MutationLogger_getClosedLogs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getClosedLogs failed: unknown result');
};
MutationLoggerClient.prototype.remove = function(tinfo, credentials, files, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_remove(tinfo, credentials, files);
};

MutationLoggerClient.prototype.send_remove = function(tinfo, credentials, files) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid);
  var args = new MutationLogger_remove_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.files = files;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
MutationLoggerClient.prototype.beginShutdown = function(tinfo, credentials, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_beginShutdown(tinfo, credentials);
};

MutationLoggerClient.prototype.send_beginShutdown = function(tinfo, credentials) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('beginShutdown', Thrift.MessageType.CALL, this.seqid);
  var args = new MutationLogger_beginShutdown_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MutationLoggerClient.prototype.recv_beginShutdown = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MutationLogger_beginShutdown_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
MutationLoggerClient.prototype.halt = function(tinfo, credentials, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_halt(tinfo, credentials);
};

MutationLoggerClient.prototype.send_halt = function(tinfo, credentials) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('halt', Thrift.MessageType.CALL, this.seqid);
  var args = new MutationLogger_halt_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
var MutationLoggerProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
MutationLoggerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

MutationLoggerProcessor.prototype.process_create = function(seqid, input, output) {
  var args = new MutationLogger_create_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MutationLogger_create_result();
  this._handler.create(args.tinfo, args.credentials, args.tserverSession, function (success) {
    result.success = success;
    output.writeMessageBegin("create", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MutationLoggerProcessor.prototype.process_defineTablet = function(seqid, input, output) {
  var args = new MutationLogger_defineTablet_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MutationLogger_defineTablet_result();
  this._handler.defineTablet(args.tinfo, args.id, args.seq, args.tid, args.tablet, function (success) {
    result.success = success;
    output.writeMessageBegin("defineTablet", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MutationLoggerProcessor.prototype.process_log = function(seqid, input, output) {
  var args = new MutationLogger_log_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MutationLogger_log_result();
  this._handler.log(args.tinfo, args.id, args.seq, args.tid, args.mutation, function (success) {
    result.success = success;
    output.writeMessageBegin("log", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MutationLoggerProcessor.prototype.process_logManyTablets = function(seqid, input, output) {
  var args = new MutationLogger_logManyTablets_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MutationLogger_logManyTablets_result();
  this._handler.logManyTablets(args.tinfo, args.id, args.mutations, function (success) {
    result.success = success;
    output.writeMessageBegin("logManyTablets", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MutationLoggerProcessor.prototype.process_minorCompactionStarted = function(seqid, input, output) {
  var args = new MutationLogger_minorCompactionStarted_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MutationLogger_minorCompactionStarted_result();
  this._handler.minorCompactionStarted(args.tinfo, args.id, args.seq, args.tid, args.fqfn, function (success) {
    result.success = success;
    output.writeMessageBegin("minorCompactionStarted", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MutationLoggerProcessor.prototype.process_minorCompactionFinished = function(seqid, input, output) {
  var args = new MutationLogger_minorCompactionFinished_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MutationLogger_minorCompactionFinished_result();
  this._handler.minorCompactionFinished(args.tinfo, args.id, args.seq, args.tid, args.fqfn, function (success) {
    result.success = success;
    output.writeMessageBegin("minorCompactionFinished", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MutationLoggerProcessor.prototype.process_close = function(seqid, input, output) {
  var args = new MutationLogger_close_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MutationLogger_close_result();
  this._handler.close(args.tinfo, args.id, function (success) {
    result.success = success;
    output.writeMessageBegin("close", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MutationLoggerProcessor.prototype.process_startCopy = function(seqid, input, output) {
  var args = new MutationLogger_startCopy_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MutationLogger_startCopy_result();
  this._handler.startCopy(args.tinfo, args.credentials, args.name, args.fullyQualifiedFileName, args.sort, function (success) {
    result.success = success;
    output.writeMessageBegin("startCopy", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MutationLoggerProcessor.prototype.process_getClosedLogs = function(seqid, input, output) {
  var args = new MutationLogger_getClosedLogs_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MutationLogger_getClosedLogs_result();
  this._handler.getClosedLogs(args.tinfo, args.credentials, function (success) {
    result.success = success;
    output.writeMessageBegin("getClosedLogs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MutationLoggerProcessor.prototype.process_remove = function(seqid, input, output) {
  var args = new MutationLogger_remove_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.remove(args.tinfo, args.credentials, args.files)
}

MutationLoggerProcessor.prototype.process_beginShutdown = function(seqid, input, output) {
  var args = new MutationLogger_beginShutdown_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MutationLogger_beginShutdown_result();
  this._handler.beginShutdown(args.tinfo, args.credentials, function (success) {
    result.success = success;
    output.writeMessageBegin("beginShutdown", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MutationLoggerProcessor.prototype.process_halt = function(seqid, input, output) {
  var args = new MutationLogger_halt_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.halt(args.tinfo, args.credentials)
}

