//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var security_ttypes = require('./security_types')
var cloudtrace_ttypes = require('./cloudtrace_types')


var ttypes = require('./gc_types');
//HELPER FUNCTIONS AND STRUCTURES

var GCMonitorService_getStatus_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
GCMonitorService_getStatus_args.prototype = {};
GCMonitorService_getStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GCMonitorService_getStatus_args.prototype.write = function(output) {
  output.writeStructBegin('GCMonitorService_getStatus_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GCMonitorService_getStatus_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
GCMonitorService_getStatus_result.prototype = {};
GCMonitorService_getStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GCStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GCMonitorService_getStatus_result.prototype.write = function(output) {
  output.writeStructBegin('GCMonitorService_getStatus_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GCMonitorServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
GCMonitorServiceClient.prototype = {};
GCMonitorServiceClient.prototype.getStatus = function(tinfo, credentials, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getStatus(tinfo, credentials);
};

GCMonitorServiceClient.prototype.send_getStatus = function(tinfo, credentials) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new GCMonitorService_getStatus_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GCMonitorServiceClient.prototype.recv_getStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GCMonitorService_getStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStatus failed: unknown result');
};
var GCMonitorServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
GCMonitorServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

GCMonitorServiceProcessor.prototype.process_getStatus = function(seqid, input, output) {
  var args = new GCMonitorService_getStatus_args();
  args.read(input);
  input.readMessageEnd();
  var result = new GCMonitorService_getStatus_result();
  this._handler.getStatus(args.tinfo, args.credentials, function (success) {
    result.success = success;
    output.writeMessageBegin("getStatus", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

