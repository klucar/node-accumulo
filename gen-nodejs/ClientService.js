//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var security_ttypes = require('./security_types')
var cloudtrace_ttypes = require('./cloudtrace_types')


var ttypes = require('./client_types');
//HELPER FUNCTIONS AND STRUCTURES

var ClientService_getRootTabletLocation_args = function(args) {
};
ClientService_getRootTabletLocation_args.prototype = {};
ClientService_getRootTabletLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getRootTabletLocation_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getRootTabletLocation_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getRootTabletLocation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ClientService_getRootTabletLocation_result.prototype = {};
ClientService_getRootTabletLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getRootTabletLocation_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getRootTabletLocation_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getInstanceId_args = function(args) {
};
ClientService_getInstanceId_args.prototype = {};
ClientService_getInstanceId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getInstanceId_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getInstanceId_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getInstanceId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ClientService_getInstanceId_result.prototype = {};
ClientService_getInstanceId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getInstanceId_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getInstanceId_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getZooKeepers_args = function(args) {
};
ClientService_getZooKeepers_args.prototype = {};
ClientService_getZooKeepers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getZooKeepers_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getZooKeepers_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getZooKeepers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ClientService_getZooKeepers_result.prototype = {};
ClientService_getZooKeepers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getZooKeepers_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getZooKeepers_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_bulkImportFiles_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.tid = null;
  this.tableId = null;
  this.files = null;
  this.errorDir = null;
  this.setTime = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.tid !== undefined) {
      this.tid = args.tid;
    }
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
    if (args.files !== undefined) {
      this.files = args.files;
    }
    if (args.errorDir !== undefined) {
      this.errorDir = args.errorDir;
    }
    if (args.setTime !== undefined) {
      this.setTime = args.setTime;
    }
  }
};
ClientService_bulkImportFiles_args.prototype = {};
ClientService_bulkImportFiles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.tid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.files = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.files.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.errorDir = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.setTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_bulkImportFiles_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_bulkImportFiles_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 1);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 2);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.tid) {
    output.writeFieldBegin('tid', Thrift.Type.I64, 3);
    output.writeI64(this.tid);
    output.writeFieldEnd();
  }
  if (this.tableId) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 4);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  if (this.files) {
    output.writeFieldBegin('files', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.files.length);
    for (var iter7 in this.files)
    {
      if (this.files.hasOwnProperty(iter7))
      {
        iter7 = this.files[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.errorDir) {
    output.writeFieldBegin('errorDir', Thrift.Type.STRING, 6);
    output.writeString(this.errorDir);
    output.writeFieldEnd();
  }
  if (this.setTime) {
    output.writeFieldBegin('setTime', Thrift.Type.BOOL, 7);
    output.writeBool(this.setTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_bulkImportFiles_result = function(args) {
  this.success = null;
  this.sec = null;
  this.tope = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.tope !== undefined) {
      this.tope = args.tope;
    }
  }
};
ClientService_bulkImportFiles_result.prototype = {};
ClientService_bulkImportFiles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tope = new ttypes.ThriftTableOperationException();
        this.tope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_bulkImportFiles_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_bulkImportFiles_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.tope) {
    output.writeFieldBegin('tope', Thrift.Type.STRUCT, 2);
    this.tope.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_isActive_args = function(args) {
  this.tinfo = null;
  this.tid = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.tid !== undefined) {
      this.tid = args.tid;
    }
  }
};
ClientService_isActive_args.prototype = {};
ClientService_isActive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.tid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_isActive_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_isActive_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 1);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.tid) {
    output.writeFieldBegin('tid', Thrift.Type.I64, 2);
    output.writeI64(this.tid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_isActive_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ClientService_isActive_result.prototype = {};
ClientService_isActive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_isActive_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_isActive_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_ping_args = function(args) {
  this.credentials = null;
  if (args) {
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
ClientService_ping_args.prototype = {};
ClientService_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_ping_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_ping_args');
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_ping_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
ClientService_ping_result.prototype = {};
ClientService_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_ping_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_ping_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_authenticateUser_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.user = null;
  this.password = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
ClientService_authenticateUser_args.prototype = {};
ClientService_authenticateUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_authenticateUser_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_authenticateUser_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.password) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_authenticateUser_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
ClientService_authenticateUser_result.prototype = {};
ClientService_authenticateUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_authenticateUser_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_authenticateUser_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_listUsers_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
ClientService_listUsers_args.prototype = {};
ClientService_listUsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_listUsers_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_listUsers_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 2);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_listUsers_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
ClientService_listUsers_result.prototype = {};
ClientService_listUsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readSetBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.success.push(elem22);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_listUsers_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_listUsers_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        output.writeString(iter23);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_createUser_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.user = null;
  this.password = null;
  this.authorizations = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.authorizations !== undefined) {
      this.authorizations = args.authorizations;
    }
  }
};
ClientService_createUser_args.prototype = {};
ClientService_createUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.authorizations = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString();
          this.authorizations.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_createUser_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_createUser_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.password) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.authorizations) {
    output.writeFieldBegin('authorizations', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.authorizations.length);
    for (var iter31 in this.authorizations)
    {
      if (this.authorizations.hasOwnProperty(iter31))
      {
        iter31 = this.authorizations[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_createUser_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
ClientService_createUser_result.prototype = {};
ClientService_createUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_createUser_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_createUser_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_dropUser_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.user = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
ClientService_dropUser_args.prototype = {};
ClientService_dropUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_dropUser_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_dropUser_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_dropUser_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
ClientService_dropUser_result.prototype = {};
ClientService_dropUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_dropUser_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_dropUser_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_changePassword_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.user = null;
  this.password = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
ClientService_changePassword_args.prototype = {};
ClientService_changePassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_changePassword_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_changePassword_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.password) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_changePassword_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
ClientService_changePassword_result.prototype = {};
ClientService_changePassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_changePassword_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_changePassword_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_changeAuthorizations_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.user = null;
  this.authorizations = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.authorizations !== undefined) {
      this.authorizations = args.authorizations;
    }
  }
};
ClientService_changeAuthorizations_args.prototype = {};
ClientService_changeAuthorizations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.authorizations = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString();
          this.authorizations.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_changeAuthorizations_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_changeAuthorizations_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.authorizations) {
    output.writeFieldBegin('authorizations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.authorizations.length);
    for (var iter39 in this.authorizations)
    {
      if (this.authorizations.hasOwnProperty(iter39))
      {
        iter39 = this.authorizations[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_changeAuthorizations_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
ClientService_changeAuthorizations_result.prototype = {};
ClientService_changeAuthorizations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_changeAuthorizations_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_changeAuthorizations_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getUserAuthorizations_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.user = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
ClientService_getUserAuthorizations_args.prototype = {};
ClientService_getUserAuthorizations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getUserAuthorizations_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getUserAuthorizations_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 3);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getUserAuthorizations_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
ClientService_getUserAuthorizations_result.prototype = {};
ClientService_getUserAuthorizations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString();
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getUserAuthorizations_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getUserAuthorizations_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_hasSystemPermission_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.user = null;
  this.sysPerm = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.sysPerm !== undefined) {
      this.sysPerm = args.sysPerm;
    }
  }
};
ClientService_hasSystemPermission_args.prototype = {};
ClientService_hasSystemPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.sysPerm = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_hasSystemPermission_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_hasSystemPermission_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.sysPerm) {
    output.writeFieldBegin('sysPerm', Thrift.Type.BYTE, 3);
    output.writeByte(this.sysPerm);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_hasSystemPermission_result = function(args) {
  this.success = null;
  this.sec = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
ClientService_hasSystemPermission_result.prototype = {};
ClientService_hasSystemPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_hasSystemPermission_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_hasSystemPermission_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_hasTablePermission_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.user = null;
  this.tableName = null;
  this.tblPerm = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.tblPerm !== undefined) {
      this.tblPerm = args.tblPerm;
    }
  }
};
ClientService_hasTablePermission_args.prototype = {};
ClientService_hasTablePermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.tblPerm = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_hasTablePermission_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_hasTablePermission_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tblPerm) {
    output.writeFieldBegin('tblPerm', Thrift.Type.BYTE, 4);
    output.writeByte(this.tblPerm);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_hasTablePermission_result = function(args) {
  this.success = null;
  this.sec = null;
  this.tope = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.tope !== undefined) {
      this.tope = args.tope;
    }
  }
};
ClientService_hasTablePermission_result.prototype = {};
ClientService_hasTablePermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tope = new ttypes.ThriftTableOperationException();
        this.tope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_hasTablePermission_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_hasTablePermission_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.tope) {
    output.writeFieldBegin('tope', Thrift.Type.STRUCT, 2);
    this.tope.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_grantSystemPermission_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.user = null;
  this.permission = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.permission !== undefined) {
      this.permission = args.permission;
    }
  }
};
ClientService_grantSystemPermission_args.prototype = {};
ClientService_grantSystemPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.permission = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_grantSystemPermission_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_grantSystemPermission_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.permission) {
    output.writeFieldBegin('permission', Thrift.Type.BYTE, 3);
    output.writeByte(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_grantSystemPermission_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
ClientService_grantSystemPermission_result.prototype = {};
ClientService_grantSystemPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_grantSystemPermission_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_grantSystemPermission_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_revokeSystemPermission_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.user = null;
  this.permission = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.permission !== undefined) {
      this.permission = args.permission;
    }
  }
};
ClientService_revokeSystemPermission_args.prototype = {};
ClientService_revokeSystemPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.permission = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_revokeSystemPermission_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_revokeSystemPermission_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 4);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.permission) {
    output.writeFieldBegin('permission', Thrift.Type.BYTE, 3);
    output.writeByte(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_revokeSystemPermission_result = function(args) {
  this.sec = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
  }
};
ClientService_revokeSystemPermission_result.prototype = {};
ClientService_revokeSystemPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_revokeSystemPermission_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_revokeSystemPermission_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_grantTablePermission_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.user = null;
  this.tableName = null;
  this.permission = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.permission !== undefined) {
      this.permission = args.permission;
    }
  }
};
ClientService_grantTablePermission_args.prototype = {};
ClientService_grantTablePermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.permission = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_grantTablePermission_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_grantTablePermission_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.permission) {
    output.writeFieldBegin('permission', Thrift.Type.BYTE, 4);
    output.writeByte(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_grantTablePermission_result = function(args) {
  this.sec = null;
  this.tope = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.tope !== undefined) {
      this.tope = args.tope;
    }
  }
};
ClientService_grantTablePermission_result.prototype = {};
ClientService_grantTablePermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tope = new ttypes.ThriftTableOperationException();
        this.tope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_grantTablePermission_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_grantTablePermission_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.tope) {
    output.writeFieldBegin('tope', Thrift.Type.STRUCT, 2);
    this.tope.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_revokeTablePermission_args = function(args) {
  this.tinfo = null;
  this.credentials = null;
  this.user = null;
  this.tableName = null;
  this.permission = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.permission !== undefined) {
      this.permission = args.permission;
    }
  }
};
ClientService_revokeTablePermission_args.prototype = {};
ClientService_revokeTablePermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new security_ttypes.AuthInfo();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.permission = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_revokeTablePermission_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_revokeTablePermission_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 5);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.permission) {
    output.writeFieldBegin('permission', Thrift.Type.BYTE, 4);
    output.writeByte(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_revokeTablePermission_result = function(args) {
  this.sec = null;
  this.tope = null;
  if (args) {
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.tope !== undefined) {
      this.tope = args.tope;
    }
  }
};
ClientService_revokeTablePermission_result.prototype = {};
ClientService_revokeTablePermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sec = new security_ttypes.ThriftSecurityException();
        this.sec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tope = new ttypes.ThriftTableOperationException();
        this.tope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_revokeTablePermission_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_revokeTablePermission_result');
  if (this.sec) {
    output.writeFieldBegin('sec', Thrift.Type.STRUCT, 1);
    this.sec.write(output);
    output.writeFieldEnd();
  }
  if (this.tope) {
    output.writeFieldBegin('tope', Thrift.Type.STRUCT, 2);
    this.tope.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getConfiguration_args = function(args) {
  this.type = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
ClientService_getConfiguration_args.prototype = {};
ClientService_getConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getConfiguration_args');
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getConfiguration_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ClientService_getConfiguration_result.prototype = {};
ClientService_getConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size48 = 0;
        var _rtmp352;
        this.success = {};
        var _ktype49 = 0;
        var _vtype50 = 0;
        _rtmp352 = input.readMapBegin();
        _ktype49 = _rtmp352.ktype;
        _vtype50 = _rtmp352.vtype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var key54 = null;
          var val55 = null;
          key54 = input.readString();
          val55 = input.readString();
          this.success[key54] = val55;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getConfiguration_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter56 in this.success)
    {
      if (this.success.hasOwnProperty(kiter56))
      {
        var viter57 = this.success[kiter56];
        output.writeString(kiter56);
        output.writeString(viter57);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getTableConfiguration_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
ClientService_getTableConfiguration_args.prototype = {};
ClientService_getTableConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getTableConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getTableConfiguration_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getTableConfiguration_result = function(args) {
  this.success = null;
  this.tope = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.tope !== undefined) {
      this.tope = args.tope;
    }
  }
};
ClientService_getTableConfiguration_result.prototype = {};
ClientService_getTableConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size58 = 0;
        var _rtmp362;
        this.success = {};
        var _ktype59 = 0;
        var _vtype60 = 0;
        _rtmp362 = input.readMapBegin();
        _ktype59 = _rtmp362.ktype;
        _vtype60 = _rtmp362.vtype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var key64 = null;
          var val65 = null;
          key64 = input.readString();
          val65 = input.readString();
          this.success[key64] = val65;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tope = new ttypes.ThriftTableOperationException();
        this.tope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getTableConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getTableConfiguration_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter66 in this.success)
    {
      if (this.success.hasOwnProperty(kiter66))
      {
        var viter67 = this.success[kiter66];
        output.writeString(kiter66);
        output.writeString(viter67);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tope) {
    output.writeFieldBegin('tope', Thrift.Type.STRUCT, 1);
    this.tope.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_checkClass_args = function(args) {
  this.tinfo = null;
  this.className = null;
  this.interfaceMatch = null;
  if (args) {
    if (args.tinfo !== undefined) {
      this.tinfo = args.tinfo;
    }
    if (args.className !== undefined) {
      this.className = args.className;
    }
    if (args.interfaceMatch !== undefined) {
      this.interfaceMatch = args.interfaceMatch;
    }
  }
};
ClientService_checkClass_args.prototype = {};
ClientService_checkClass_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tinfo = new cloudtrace_ttypes.TInfo();
        this.tinfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.className = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.interfaceMatch = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_checkClass_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_checkClass_args');
  if (this.tinfo) {
    output.writeFieldBegin('tinfo', Thrift.Type.STRUCT, 1);
    this.tinfo.write(output);
    output.writeFieldEnd();
  }
  if (this.className) {
    output.writeFieldBegin('className', Thrift.Type.STRING, 2);
    output.writeString(this.className);
    output.writeFieldEnd();
  }
  if (this.interfaceMatch) {
    output.writeFieldBegin('interfaceMatch', Thrift.Type.STRING, 3);
    output.writeString(this.interfaceMatch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_checkClass_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ClientService_checkClass_result.prototype = {};
ClientService_checkClass_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_checkClass_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_checkClass_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
ClientServiceClient.prototype = {};
ClientServiceClient.prototype.getRootTabletLocation = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRootTabletLocation();
};

ClientServiceClient.prototype.send_getRootTabletLocation = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRootTabletLocation', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_getRootTabletLocation_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_getRootTabletLocation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_getRootTabletLocation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRootTabletLocation failed: unknown result');
};
ClientServiceClient.prototype.getInstanceId = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getInstanceId();
};

ClientServiceClient.prototype.send_getInstanceId = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getInstanceId', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_getInstanceId_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_getInstanceId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_getInstanceId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getInstanceId failed: unknown result');
};
ClientServiceClient.prototype.getZooKeepers = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getZooKeepers();
};

ClientServiceClient.prototype.send_getZooKeepers = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getZooKeepers', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_getZooKeepers_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_getZooKeepers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_getZooKeepers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getZooKeepers failed: unknown result');
};
ClientServiceClient.prototype.bulkImportFiles = function(tinfo, credentials, tid, tableId, files, errorDir, setTime, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_bulkImportFiles(tinfo, credentials, tid, tableId, files, errorDir, setTime);
};

ClientServiceClient.prototype.send_bulkImportFiles = function(tinfo, credentials, tid, tableId, files, errorDir, setTime) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('bulkImportFiles', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_bulkImportFiles_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.tid = tid;
  args.tableId = tableId;
  args.files = files;
  args.errorDir = errorDir;
  args.setTime = setTime;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_bulkImportFiles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_bulkImportFiles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.tope) {
    return callback(result.tope);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('bulkImportFiles failed: unknown result');
};
ClientServiceClient.prototype.isActive = function(tinfo, tid, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_isActive(tinfo, tid);
};

ClientServiceClient.prototype.send_isActive = function(tinfo, tid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isActive', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_isActive_args();
  args.tinfo = tinfo;
  args.tid = tid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_isActive = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_isActive_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isActive failed: unknown result');
};
ClientServiceClient.prototype.ping = function(credentials, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_ping(credentials);
};

ClientServiceClient.prototype.send_ping = function(credentials) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_ping_args();
  args.credentials = credentials;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_ping_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
ClientServiceClient.prototype.authenticateUser = function(tinfo, credentials, user, password, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_authenticateUser(tinfo, credentials, user, password);
};

ClientServiceClient.prototype.send_authenticateUser = function(tinfo, credentials, user, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authenticateUser', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_authenticateUser_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.user = user;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_authenticateUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_authenticateUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('authenticateUser failed: unknown result');
};
ClientServiceClient.prototype.listUsers = function(tinfo, credentials, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_listUsers(tinfo, credentials);
};

ClientServiceClient.prototype.send_listUsers = function(tinfo, credentials) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listUsers', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_listUsers_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_listUsers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_listUsers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listUsers failed: unknown result');
};
ClientServiceClient.prototype.createUser = function(tinfo, credentials, user, password, authorizations, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createUser(tinfo, credentials, user, password, authorizations);
};

ClientServiceClient.prototype.send_createUser = function(tinfo, credentials, user, password, authorizations) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUser', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_createUser_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.user = user;
  args.password = password;
  args.authorizations = authorizations;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_createUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_createUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
ClientServiceClient.prototype.dropUser = function(tinfo, credentials, user, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_dropUser(tinfo, credentials, user);
};

ClientServiceClient.prototype.send_dropUser = function(tinfo, credentials, user) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('dropUser', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_dropUser_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.user = user;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_dropUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_dropUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
ClientServiceClient.prototype.changePassword = function(tinfo, credentials, user, password, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_changePassword(tinfo, credentials, user, password);
};

ClientServiceClient.prototype.send_changePassword = function(tinfo, credentials, user, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('changePassword', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_changePassword_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.user = user;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_changePassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_changePassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
ClientServiceClient.prototype.changeAuthorizations = function(tinfo, credentials, user, authorizations, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_changeAuthorizations(tinfo, credentials, user, authorizations);
};

ClientServiceClient.prototype.send_changeAuthorizations = function(tinfo, credentials, user, authorizations) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('changeAuthorizations', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_changeAuthorizations_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.user = user;
  args.authorizations = authorizations;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_changeAuthorizations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_changeAuthorizations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
ClientServiceClient.prototype.getUserAuthorizations = function(tinfo, credentials, user, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getUserAuthorizations(tinfo, credentials, user);
};

ClientServiceClient.prototype.send_getUserAuthorizations = function(tinfo, credentials, user) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserAuthorizations', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_getUserAuthorizations_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.user = user;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_getUserAuthorizations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_getUserAuthorizations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserAuthorizations failed: unknown result');
};
ClientServiceClient.prototype.hasSystemPermission = function(tinfo, credentials, user, sysPerm, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_hasSystemPermission(tinfo, credentials, user, sysPerm);
};

ClientServiceClient.prototype.send_hasSystemPermission = function(tinfo, credentials, user, sysPerm) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hasSystemPermission', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_hasSystemPermission_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.user = user;
  args.sysPerm = sysPerm;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_hasSystemPermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_hasSystemPermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hasSystemPermission failed: unknown result');
};
ClientServiceClient.prototype.hasTablePermission = function(tinfo, credentials, user, tableName, tblPerm, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_hasTablePermission(tinfo, credentials, user, tableName, tblPerm);
};

ClientServiceClient.prototype.send_hasTablePermission = function(tinfo, credentials, user, tableName, tblPerm) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hasTablePermission', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_hasTablePermission_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.user = user;
  args.tableName = tableName;
  args.tblPerm = tblPerm;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_hasTablePermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_hasTablePermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.tope) {
    return callback(result.tope);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hasTablePermission failed: unknown result');
};
ClientServiceClient.prototype.grantSystemPermission = function(tinfo, credentials, user, permission, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_grantSystemPermission(tinfo, credentials, user, permission);
};

ClientServiceClient.prototype.send_grantSystemPermission = function(tinfo, credentials, user, permission) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grantSystemPermission', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_grantSystemPermission_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.user = user;
  args.permission = permission;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_grantSystemPermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_grantSystemPermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
ClientServiceClient.prototype.revokeSystemPermission = function(tinfo, credentials, user, permission, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_revokeSystemPermission(tinfo, credentials, user, permission);
};

ClientServiceClient.prototype.send_revokeSystemPermission = function(tinfo, credentials, user, permission) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revokeSystemPermission', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_revokeSystemPermission_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.user = user;
  args.permission = permission;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_revokeSystemPermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_revokeSystemPermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  callback(null)
};
ClientServiceClient.prototype.grantTablePermission = function(tinfo, credentials, user, tableName, permission, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_grantTablePermission(tinfo, credentials, user, tableName, permission);
};

ClientServiceClient.prototype.send_grantTablePermission = function(tinfo, credentials, user, tableName, permission) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grantTablePermission', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_grantTablePermission_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.user = user;
  args.tableName = tableName;
  args.permission = permission;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_grantTablePermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_grantTablePermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.tope) {
    return callback(result.tope);
  }
  callback(null)
};
ClientServiceClient.prototype.revokeTablePermission = function(tinfo, credentials, user, tableName, permission, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_revokeTablePermission(tinfo, credentials, user, tableName, permission);
};

ClientServiceClient.prototype.send_revokeTablePermission = function(tinfo, credentials, user, tableName, permission) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revokeTablePermission', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_revokeTablePermission_args();
  args.tinfo = tinfo;
  args.credentials = credentials;
  args.user = user;
  args.tableName = tableName;
  args.permission = permission;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_revokeTablePermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_revokeTablePermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.sec) {
    return callback(result.sec);
  }
  if (null !== result.tope) {
    return callback(result.tope);
  }
  callback(null)
};
ClientServiceClient.prototype.getConfiguration = function(type, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getConfiguration(type);
};

ClientServiceClient.prototype.send_getConfiguration = function(type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getConfiguration', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_getConfiguration_args();
  args.type = type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_getConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_getConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getConfiguration failed: unknown result');
};
ClientServiceClient.prototype.getTableConfiguration = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTableConfiguration(tableName);
};

ClientServiceClient.prototype.send_getTableConfiguration = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableConfiguration', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_getTableConfiguration_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_getTableConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_getTableConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.tope) {
    return callback(result.tope);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableConfiguration failed: unknown result');
};
ClientServiceClient.prototype.checkClass = function(tinfo, className, interfaceMatch, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_checkClass(tinfo, className, interfaceMatch);
};

ClientServiceClient.prototype.send_checkClass = function(tinfo, className, interfaceMatch) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkClass', Thrift.MessageType.CALL, this.seqid);
  var args = new ClientService_checkClass_args();
  args.tinfo = tinfo;
  args.className = className;
  args.interfaceMatch = interfaceMatch;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_checkClass = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_checkClass_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkClass failed: unknown result');
};
var ClientServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ClientServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ClientServiceProcessor.prototype.process_getRootTabletLocation = function(seqid, input, output) {
  var args = new ClientService_getRootTabletLocation_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_getRootTabletLocation_result();
  this._handler.getRootTabletLocation(function (success) {
    result.success = success;
    output.writeMessageBegin("getRootTabletLocation", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_getInstanceId = function(seqid, input, output) {
  var args = new ClientService_getInstanceId_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_getInstanceId_result();
  this._handler.getInstanceId(function (success) {
    result.success = success;
    output.writeMessageBegin("getInstanceId", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_getZooKeepers = function(seqid, input, output) {
  var args = new ClientService_getZooKeepers_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_getZooKeepers_result();
  this._handler.getZooKeepers(function (success) {
    result.success = success;
    output.writeMessageBegin("getZooKeepers", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_bulkImportFiles = function(seqid, input, output) {
  var args = new ClientService_bulkImportFiles_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_bulkImportFiles_result();
  this._handler.bulkImportFiles(args.tinfo, args.credentials, args.tid, args.tableId, args.files, args.errorDir, args.setTime, function (success) {
    result.success = success;
    output.writeMessageBegin("bulkImportFiles", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_isActive = function(seqid, input, output) {
  var args = new ClientService_isActive_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_isActive_result();
  this._handler.isActive(args.tinfo, args.tid, function (success) {
    result.success = success;
    output.writeMessageBegin("isActive", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new ClientService_ping_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_ping_result();
  this._handler.ping(args.credentials, function (success) {
    result.success = success;
    output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_authenticateUser = function(seqid, input, output) {
  var args = new ClientService_authenticateUser_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_authenticateUser_result();
  this._handler.authenticateUser(args.tinfo, args.credentials, args.user, args.password, function (success) {
    result.success = success;
    output.writeMessageBegin("authenticateUser", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_listUsers = function(seqid, input, output) {
  var args = new ClientService_listUsers_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_listUsers_result();
  this._handler.listUsers(args.tinfo, args.credentials, function (success) {
    result.success = success;
    output.writeMessageBegin("listUsers", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_createUser = function(seqid, input, output) {
  var args = new ClientService_createUser_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_createUser_result();
  this._handler.createUser(args.tinfo, args.credentials, args.user, args.password, args.authorizations, function (success) {
    result.success = success;
    output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_dropUser = function(seqid, input, output) {
  var args = new ClientService_dropUser_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_dropUser_result();
  this._handler.dropUser(args.tinfo, args.credentials, args.user, function (success) {
    result.success = success;
    output.writeMessageBegin("dropUser", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_changePassword = function(seqid, input, output) {
  var args = new ClientService_changePassword_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_changePassword_result();
  this._handler.changePassword(args.tinfo, args.credentials, args.user, args.password, function (success) {
    result.success = success;
    output.writeMessageBegin("changePassword", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_changeAuthorizations = function(seqid, input, output) {
  var args = new ClientService_changeAuthorizations_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_changeAuthorizations_result();
  this._handler.changeAuthorizations(args.tinfo, args.credentials, args.user, args.authorizations, function (success) {
    result.success = success;
    output.writeMessageBegin("changeAuthorizations", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_getUserAuthorizations = function(seqid, input, output) {
  var args = new ClientService_getUserAuthorizations_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_getUserAuthorizations_result();
  this._handler.getUserAuthorizations(args.tinfo, args.credentials, args.user, function (success) {
    result.success = success;
    output.writeMessageBegin("getUserAuthorizations", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_hasSystemPermission = function(seqid, input, output) {
  var args = new ClientService_hasSystemPermission_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_hasSystemPermission_result();
  this._handler.hasSystemPermission(args.tinfo, args.credentials, args.user, args.sysPerm, function (success) {
    result.success = success;
    output.writeMessageBegin("hasSystemPermission", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_hasTablePermission = function(seqid, input, output) {
  var args = new ClientService_hasTablePermission_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_hasTablePermission_result();
  this._handler.hasTablePermission(args.tinfo, args.credentials, args.user, args.tableName, args.tblPerm, function (success) {
    result.success = success;
    output.writeMessageBegin("hasTablePermission", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_grantSystemPermission = function(seqid, input, output) {
  var args = new ClientService_grantSystemPermission_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_grantSystemPermission_result();
  this._handler.grantSystemPermission(args.tinfo, args.credentials, args.user, args.permission, function (success) {
    result.success = success;
    output.writeMessageBegin("grantSystemPermission", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_revokeSystemPermission = function(seqid, input, output) {
  var args = new ClientService_revokeSystemPermission_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_revokeSystemPermission_result();
  this._handler.revokeSystemPermission(args.tinfo, args.credentials, args.user, args.permission, function (success) {
    result.success = success;
    output.writeMessageBegin("revokeSystemPermission", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_grantTablePermission = function(seqid, input, output) {
  var args = new ClientService_grantTablePermission_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_grantTablePermission_result();
  this._handler.grantTablePermission(args.tinfo, args.credentials, args.user, args.tableName, args.permission, function (success) {
    result.success = success;
    output.writeMessageBegin("grantTablePermission", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_revokeTablePermission = function(seqid, input, output) {
  var args = new ClientService_revokeTablePermission_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_revokeTablePermission_result();
  this._handler.revokeTablePermission(args.tinfo, args.credentials, args.user, args.tableName, args.permission, function (success) {
    result.success = success;
    output.writeMessageBegin("revokeTablePermission", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_getConfiguration = function(seqid, input, output) {
  var args = new ClientService_getConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_getConfiguration_result();
  this._handler.getConfiguration(args.type, function (success) {
    result.success = success;
    output.writeMessageBegin("getConfiguration", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_getTableConfiguration = function(seqid, input, output) {
  var args = new ClientService_getTableConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_getTableConfiguration_result();
  this._handler.getTableConfiguration(args.tableName, function (success) {
    result.success = success;
    output.writeMessageBegin("getTableConfiguration", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ClientServiceProcessor.prototype.process_checkClass = function(seqid, input, output) {
  var args = new ClientService_checkClass_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ClientService_checkClass_result();
  this._handler.checkClass(args.tinfo, args.className, args.interfaceMatch, function (success) {
    result.success = success;
    output.writeMessageBegin("checkClass", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

