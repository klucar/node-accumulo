//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.ScanType = {
'SINGLE' : 0,
'BATCH' : 1
};
ttypes.ScanState = {
'IDLE' : 0,
'RUNNING' : 1,
'QUEUED' : 2
};
var NotServingTabletException = module.exports.NotServingTabletException = function(args) {
  Thrift.TException.call(this, "NotServingTabletException")
  this.name = "NotServingTabletException"
  this.extent = null;
  if (args) {
    if (args.extent !== undefined) {
      this.extent = args.extent;
    }
  }
};
Thrift.inherits(NotServingTabletException, Thrift.TException);
NotServingTabletException.prototype.name = 'NotServingTabletException';
NotServingTabletException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.extent = new data_ttypes.TKeyExtent();
        this.extent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotServingTabletException.prototype.write = function(output) {
  output.writeStructBegin('NotServingTabletException');
  if (this.extent) {
    output.writeFieldBegin('extent', Thrift.Type.STRUCT, 1);
    this.extent.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TooManyFilesException = module.exports.TooManyFilesException = function(args) {
  Thrift.TException.call(this, "TooManyFilesException")
  this.name = "TooManyFilesException"
  this.extent = null;
  if (args) {
    if (args.extent !== undefined) {
      this.extent = args.extent;
    }
  }
};
Thrift.inherits(TooManyFilesException, Thrift.TException);
TooManyFilesException.prototype.name = 'TooManyFilesException';
TooManyFilesException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.extent = new data_ttypes.TKeyExtent();
        this.extent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TooManyFilesException.prototype.write = function(output) {
  output.writeStructBegin('TooManyFilesException');
  if (this.extent) {
    output.writeFieldBegin('extent', Thrift.Type.STRUCT, 1);
    this.extent.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoSuchScanIDException = module.exports.NoSuchScanIDException = function(args) {
  Thrift.TException.call(this, "NoSuchScanIDException")
  this.name = "NoSuchScanIDException"
};
Thrift.inherits(NoSuchScanIDException, Thrift.TException);
NoSuchScanIDException.prototype.name = 'NoSuchScanIDException';
NoSuchScanIDException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchScanIDException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchScanIDException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ConstraintViolationException = module.exports.ConstraintViolationException = function(args) {
  Thrift.TException.call(this, "ConstraintViolationException")
  this.name = "ConstraintViolationException"
  this.violationSummaries = null;
  if (args) {
    if (args.violationSummaries !== undefined) {
      this.violationSummaries = args.violationSummaries;
    }
  }
};
Thrift.inherits(ConstraintViolationException, Thrift.TException);
ConstraintViolationException.prototype.name = 'ConstraintViolationException';
ConstraintViolationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.violationSummaries = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new data_ttypes.TConstraintViolationSummary();
          elem6.read(input);
          this.violationSummaries.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConstraintViolationException.prototype.write = function(output) {
  output.writeStructBegin('ConstraintViolationException');
  if (this.violationSummaries) {
    output.writeFieldBegin('violationSummaries', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.violationSummaries.length);
    for (var iter7 in this.violationSummaries)
    {
      if (this.violationSummaries.hasOwnProperty(iter7))
      {
        iter7 = this.violationSummaries[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActionStats = module.exports.ActionStats = function(args) {
  this.status = null;
  this.elapsed = null;
  this.num = null;
  this.count = null;
  this.sumDev = null;
  this.fail = null;
  this.queueTime = null;
  this.queueSumDev = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.elapsed !== undefined) {
      this.elapsed = args.elapsed;
    }
    if (args.num !== undefined) {
      this.num = args.num;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.sumDev !== undefined) {
      this.sumDev = args.sumDev;
    }
    if (args.fail !== undefined) {
      this.fail = args.fail;
    }
    if (args.queueTime !== undefined) {
      this.queueTime = args.queueTime;
    }
    if (args.queueSumDev !== undefined) {
      this.queueSumDev = args.queueSumDev;
    }
  }
};
ActionStats.prototype = {};
ActionStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.elapsed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.num = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.sumDev = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.fail = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.queueTime = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.queueSumDev = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActionStats.prototype.write = function(output) {
  output.writeStructBegin('ActionStats');
  if (this.status) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.elapsed) {
    output.writeFieldBegin('elapsed', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.elapsed);
    output.writeFieldEnd();
  }
  if (this.num) {
    output.writeFieldBegin('num', Thrift.Type.I32, 3);
    output.writeI32(this.num);
    output.writeFieldEnd();
  }
  if (this.count) {
    output.writeFieldBegin('count', Thrift.Type.I64, 4);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  if (this.sumDev) {
    output.writeFieldBegin('sumDev', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.sumDev);
    output.writeFieldEnd();
  }
  if (this.fail) {
    output.writeFieldBegin('fail', Thrift.Type.I32, 6);
    output.writeI32(this.fail);
    output.writeFieldEnd();
  }
  if (this.queueTime) {
    output.writeFieldBegin('queueTime', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.queueTime);
    output.writeFieldEnd();
  }
  if (this.queueSumDev) {
    output.writeFieldBegin('queueSumDev', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.queueSumDev);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletStats = module.exports.TabletStats = function(args) {
  this.extent = null;
  this.major = null;
  this.minor = null;
  this.split = null;
  this.numEntries = null;
  this.ingestRate = null;
  this.queryRate = null;
  this.splitCreationTime = null;
  if (args) {
    if (args.extent !== undefined) {
      this.extent = args.extent;
    }
    if (args.major !== undefined) {
      this.major = args.major;
    }
    if (args.minor !== undefined) {
      this.minor = args.minor;
    }
    if (args.split !== undefined) {
      this.split = args.split;
    }
    if (args.numEntries !== undefined) {
      this.numEntries = args.numEntries;
    }
    if (args.ingestRate !== undefined) {
      this.ingestRate = args.ingestRate;
    }
    if (args.queryRate !== undefined) {
      this.queryRate = args.queryRate;
    }
    if (args.splitCreationTime !== undefined) {
      this.splitCreationTime = args.splitCreationTime;
    }
  }
};
TabletStats.prototype = {};
TabletStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.extent = new data_ttypes.TKeyExtent();
        this.extent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.major = new ttypes.ActionStats();
        this.major.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.minor = new ttypes.ActionStats();
        this.minor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.split = new ttypes.ActionStats();
        this.split.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numEntries = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.ingestRate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.queryRate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.splitCreationTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletStats.prototype.write = function(output) {
  output.writeStructBegin('TabletStats');
  if (this.extent) {
    output.writeFieldBegin('extent', Thrift.Type.STRUCT, 1);
    this.extent.write(output);
    output.writeFieldEnd();
  }
  if (this.major) {
    output.writeFieldBegin('major', Thrift.Type.STRUCT, 2);
    this.major.write(output);
    output.writeFieldEnd();
  }
  if (this.minor) {
    output.writeFieldBegin('minor', Thrift.Type.STRUCT, 3);
    this.minor.write(output);
    output.writeFieldEnd();
  }
  if (this.split) {
    output.writeFieldBegin('split', Thrift.Type.STRUCT, 4);
    this.split.write(output);
    output.writeFieldEnd();
  }
  if (this.numEntries) {
    output.writeFieldBegin('numEntries', Thrift.Type.I64, 5);
    output.writeI64(this.numEntries);
    output.writeFieldEnd();
  }
  if (this.ingestRate) {
    output.writeFieldBegin('ingestRate', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.ingestRate);
    output.writeFieldEnd();
  }
  if (this.queryRate) {
    output.writeFieldBegin('queryRate', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.queryRate);
    output.writeFieldEnd();
  }
  if (this.splitCreationTime) {
    output.writeFieldBegin('splitCreationTime', Thrift.Type.I64, 8);
    output.writeI64(this.splitCreationTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActiveScan = module.exports.ActiveScan = function(args) {
  this.client = null;
  this.user = null;
  this.tableId = null;
  this.age = null;
  this.idleTime = null;
  this.type = null;
  this.state = null;
  this.extent = null;
  this.columns = null;
  this.ssiList = null;
  this.ssio = null;
  if (args) {
    if (args.client !== undefined) {
      this.client = args.client;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
    if (args.age !== undefined) {
      this.age = args.age;
    }
    if (args.idleTime !== undefined) {
      this.idleTime = args.idleTime;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.extent !== undefined) {
      this.extent = args.extent;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.ssiList !== undefined) {
      this.ssiList = args.ssiList;
    }
    if (args.ssio !== undefined) {
      this.ssio = args.ssio;
    }
  }
};
ActiveScan.prototype = {};
ActiveScan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.client = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.age = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.idleTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.extent = new data_ttypes.TKeyExtent();
        this.extent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.columns = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new data_ttypes.TColumn();
          elem14.read(input);
          this.columns.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.ssiList = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new data_ttypes.IterInfo();
          elem21.read(input);
          this.ssiList.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.MAP) {
        var _size22 = 0;
        var _rtmp326;
        this.ssio = {};
        var _ktype23 = 0;
        var _vtype24 = 0;
        _rtmp326 = input.readMapBegin();
        _ktype23 = _rtmp326.ktype;
        _vtype24 = _rtmp326.vtype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var key28 = null;
          var val29 = null;
          key28 = input.readString();
          var _size30 = 0;
          var _rtmp334;
          val29 = {};
          var _ktype31 = 0;
          var _vtype32 = 0;
          _rtmp334 = input.readMapBegin();
          _ktype31 = _rtmp334.ktype;
          _vtype32 = _rtmp334.vtype;
          _size30 = _rtmp334.size;
          for (var _i35 = 0; _i35 < _size30; ++_i35)
          {
            var key36 = null;
            var val37 = null;
            key36 = input.readString();
            val37 = input.readString();
            val29[key36] = val37;
          }
          input.readMapEnd();
          this.ssio[key28] = val29;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveScan.prototype.write = function(output) {
  output.writeStructBegin('ActiveScan');
  if (this.client) {
    output.writeFieldBegin('client', Thrift.Type.STRING, 2);
    output.writeString(this.client);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 3);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.tableId) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 4);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  if (this.age) {
    output.writeFieldBegin('age', Thrift.Type.I64, 5);
    output.writeI64(this.age);
    output.writeFieldEnd();
  }
  if (this.idleTime) {
    output.writeFieldBegin('idleTime', Thrift.Type.I64, 6);
    output.writeI64(this.idleTime);
    output.writeFieldEnd();
  }
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.I32, 7);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.state) {
    output.writeFieldBegin('state', Thrift.Type.I32, 8);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.extent) {
    output.writeFieldBegin('extent', Thrift.Type.STRUCT, 9);
    this.extent.write(output);
    output.writeFieldEnd();
  }
  if (this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter38 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter38))
      {
        iter38 = this.columns[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ssiList) {
    output.writeFieldBegin('ssiList', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.ssiList.length);
    for (var iter39 in this.ssiList)
    {
      if (this.ssiList.hasOwnProperty(iter39))
      {
        iter39 = this.ssiList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ssio) {
    output.writeFieldBegin('ssio', Thrift.Type.MAP, 12);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.ssio));
    for (var kiter40 in this.ssio)
    {
      if (this.ssio.hasOwnProperty(kiter40))
      {
        var viter41 = this.ssio[kiter40];
        output.writeString(kiter40);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(viter41));
        for (var kiter42 in viter41)
        {
          if (viter41.hasOwnProperty(kiter42))
          {
            var viter43 = viter41[kiter42];
            output.writeString(kiter42);
            output.writeString(viter43);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoSuchLogIDException = module.exports.NoSuchLogIDException = function(args) {
  Thrift.TException.call(this, "NoSuchLogIDException")
  this.name = "NoSuchLogIDException"
};
Thrift.inherits(NoSuchLogIDException, Thrift.TException);
NoSuchLogIDException.prototype.name = 'NoSuchLogIDException';
NoSuchLogIDException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchLogIDException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchLogIDException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoggerClosedException = module.exports.LoggerClosedException = function(args) {
  Thrift.TException.call(this, "LoggerClosedException")
  this.name = "LoggerClosedException"
};
Thrift.inherits(LoggerClosedException, Thrift.TException);
LoggerClosedException.prototype.name = 'LoggerClosedException';
LoggerClosedException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoggerClosedException.prototype.write = function(output) {
  output.writeStructBegin('LoggerClosedException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogFile = module.exports.LogFile = function(args) {
  this.name = null;
  this.id = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
LogFile.prototype = {};
LogFile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogFile.prototype.write = function(output) {
  output.writeStructBegin('LogFile');
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TabletMutations = module.exports.TabletMutations = function(args) {
  this.tabletID = null;
  this.seq = null;
  this.mutations = null;
  if (args) {
    if (args.tabletID !== undefined) {
      this.tabletID = args.tabletID;
    }
    if (args.seq !== undefined) {
      this.seq = args.seq;
    }
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
  }
};
TabletMutations.prototype = {};
TabletMutations.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.tabletID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.seq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.mutations = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = new data_ttypes.TMutation();
          elem50.read(input);
          this.mutations.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TabletMutations.prototype.write = function(output) {
  output.writeStructBegin('TabletMutations');
  if (this.tabletID) {
    output.writeFieldBegin('tabletID', Thrift.Type.I32, 1);
    output.writeI32(this.tabletID);
    output.writeFieldEnd();
  }
  if (this.seq) {
    output.writeFieldBegin('seq', Thrift.Type.I64, 2);
    output.writeI64(this.seq);
    output.writeFieldEnd();
  }
  if (this.mutations) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter51 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter51))
      {
        iter51 = this.mutations[iter51];
        iter51.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

